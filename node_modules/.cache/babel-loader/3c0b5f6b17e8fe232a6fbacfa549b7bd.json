{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nimport { b2BodyType } from \"box2d.ts\";\nimport { Inject, System } from \"flat-ecs\";\nimport { InputEvent } from \"gdxts\";\nimport { Constants } from \"../Constant\";\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport let InputHandlerSystem = (_dec = Inject(\"ballsTeam1\"), _dec2 = Inject(\"inputHandle\"), _dec3 = Inject(\"originPosition\"), _dec4 = Inject(\"dragPositioning\"), _dec5 = Inject(\"StateGame\"), (_class = class InputHandlerSystem extends System {\n  constructor() {\n    super(...arguments);\n\n    _initializerDefineProperty(this, \"ballsTeam1\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"inputHandle\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"originPosition\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"dragPositioning\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"StateGame\", _descriptor5, this);\n\n    this.hasFired = false;\n  }\n\n  initialized() {\n    this.inputHandle.addEventListener(InputEvent.TouchMove, () => {\n      if (this.inputHandle.isTouched()) {\n        this.dragPositioning.setVector(this.inputHandle.getTouchedWorldCoord());\n      }\n    });\n    this.inputHandle.addEventListener(InputEvent.TouchEnd, () => {\n      if (this.hasFired === false) {\n        for (let ball of this.ballsTeam1) {\n          ball.SetType(b2BodyType.b2_dynamicBody);\n          ball.ApplyLinearImpulseToCenter({\n            x: 4 * (this.originPosition.x - this.dragPositioning.x) / Constants.METER_TO_PHYSIC_WORLD + getRandomInt(-2, 2),\n            y: 4 * (this.originPosition.y - this.dragPositioning.y) / Constants.METER_TO_PHYSIC_WORLD\n          });\n          this.StateGame.CooldownTime = 5;\n          this.hasFired = true;\n          setTimeout(() => {\n            this.StateGame.changeTurn = true;\n            console.log(\"dcm\");\n          }, 4500);\n        }\n      }\n    });\n  }\n\n  process() {\n    if (this.StateGame.CooldownTime < 0) {}\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"ballsTeam1\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"inputHandle\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"originPosition\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"dragPositioning\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"StateGame\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["b2BodyType","Inject","System","InputEvent","Constants","getRandomInt","min","max","Math","floor","random","InputHandlerSystem","hasFired","initialized","inputHandle","addEventListener","TouchMove","isTouched","dragPositioning","setVector","getTouchedWorldCoord","TouchEnd","ball","ballsTeam1","SetType","b2_dynamicBody","ApplyLinearImpulseToCenter","x","originPosition","METER_TO_PHYSIC_WORLD","y","StateGame","CooldownTime","setTimeout","changeTurn","console","log","process"],"sources":["D:/projects/test-game/src/System/inputHandlerSystem.ts"],"sourcesContent":["import { b2Body, b2BodyType } from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport { InputEvent, Vector2, ViewportInputHandler } from \"gdxts\";\r\nimport { off } from \"process\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nfunction getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport class InputHandlerSystem extends System {\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"inputHandle\") inputHandle: ViewportInputHandler;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"dragPositioning\") dragPositioning: Vector2;\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n\r\n  hasFired = false;\r\n\r\n  initialized() {\r\n    this.inputHandle.addEventListener(InputEvent.TouchMove, () => {\r\n      if (this.inputHandle.isTouched()) {\r\n        this.dragPositioning.setVector(this.inputHandle.getTouchedWorldCoord());\r\n      }\r\n    });\r\n\r\n    this.inputHandle.addEventListener(InputEvent.TouchEnd, () => {\r\n      if (this.hasFired === false) {\r\n        for (let ball of this.ballsTeam1) {\r\n          ball.SetType(b2BodyType.b2_dynamicBody);\r\n          ball.ApplyLinearImpulseToCenter({\r\n            x:\r\n              (4 * (this.originPosition.x - this.dragPositioning.x)) /\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n              getRandomInt(-2, 2),\r\n            y:\r\n              (4 * (this.originPosition.y - this.dragPositioning.y)) /\r\n              Constants.METER_TO_PHYSIC_WORLD,\r\n          });\r\n          this.StateGame.CooldownTime = 5;\r\n          this.hasFired = true;\r\n          setTimeout(() => {\r\n            this.StateGame.changeTurn = true;\r\n            console.log(\"dcm\");\r\n          }, 4500);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  process(): void {\r\n    if (this.StateGame.CooldownTime < 0) {\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,SAAiBA,UAAjB,QAAmC,UAAnC;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAASC,UAAT,QAA0D,OAA1D;AAEA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgD;EAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;;AAED,WAAaK,kBAAb,WACGV,MAAM,CAAC,YAAD,CADT,UAEGA,MAAM,CAAC,aAAD,CAFT,UAGGA,MAAM,CAAC,gBAAD,CAHT,UAIGA,MAAM,CAAC,iBAAD,CAJT,UAKGA,MAAM,CAAC,WAAD,CALT,YAAO,MAAMU,kBAAN,SAAiCT,MAAjC,CAAwC;EAAA;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA,KAO7CU,QAP6C,GAOlC,KAPkC;EAAA;;EAS7CC,WAAW,GAAG;IACZ,KAAKC,WAAL,CAAiBC,gBAAjB,CAAkCZ,UAAU,CAACa,SAA7C,EAAwD,MAAM;MAC5D,IAAI,KAAKF,WAAL,CAAiBG,SAAjB,EAAJ,EAAkC;QAChC,KAAKC,eAAL,CAAqBC,SAArB,CAA+B,KAAKL,WAAL,CAAiBM,oBAAjB,EAA/B;MACD;IACF,CAJD;IAMA,KAAKN,WAAL,CAAiBC,gBAAjB,CAAkCZ,UAAU,CAACkB,QAA7C,EAAuD,MAAM;MAC3D,IAAI,KAAKT,QAAL,KAAkB,KAAtB,EAA6B;QAC3B,KAAK,IAAIU,IAAT,IAAiB,KAAKC,UAAtB,EAAkC;UAChCD,IAAI,CAACE,OAAL,CAAaxB,UAAU,CAACyB,cAAxB;UACAH,IAAI,CAACI,0BAAL,CAAgC;YAC9BC,CAAC,EACE,KAAK,KAAKC,cAAL,CAAoBD,CAApB,GAAwB,KAAKT,eAAL,CAAqBS,CAAlD,CAAD,GACEvB,SAAS,CAACyB,qBADZ,GAEAxB,YAAY,CAAC,CAAC,CAAF,EAAK,CAAL,CAJgB;YAK9ByB,CAAC,EACE,KAAK,KAAKF,cAAL,CAAoBE,CAApB,GAAwB,KAAKZ,eAAL,CAAqBY,CAAlD,CAAD,GACA1B,SAAS,CAACyB;UAPkB,CAAhC;UASA,KAAKE,SAAL,CAAeC,YAAf,GAA8B,CAA9B;UACA,KAAKpB,QAAL,GAAgB,IAAhB;UACAqB,UAAU,CAAC,MAAM;YACf,KAAKF,SAAL,CAAeG,UAAf,GAA4B,IAA5B;YACAC,OAAO,CAACC,GAAR,CAAY,KAAZ;UACD,CAHS,EAGP,IAHO,CAAV;QAID;MACF;IACF,CArBD;EAsBD;;EAEDC,OAAO,GAAS;IACd,IAAI,KAAKN,SAAL,CAAeC,YAAf,GAA8B,CAAlC,EAAqC,CACpC;EACF;;AA3C4C,CAA/C;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}