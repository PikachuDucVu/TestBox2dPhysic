{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { Color, PolygonBatch, ShapeRenderer } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + width / 2, y + width / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2);\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + width / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    body.SetUserData(\"person\");\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n\n  for (let ground of groundData) {\n    createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, ground.y / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD);\n  }\n\n  for (let person1 of personTeam1Data) {\n    createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, person1.y / Constants.METER_TO_PHYSIC_WORLD, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n  }\n\n  for (let person2 of personTeam2Data) {\n    createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, person2.y / Constants.METER_TO_PHYSIC_WORLD, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n  }\n\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n      shapeRenderer.begin();\n      shapeRenderer.rect(true, 0, 0, Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT);\n\n      for (let ground of groundData) {\n        shapeRenderer.rect(true, ground.x, ground.y, ground.width, ground.height, Color.BLUE);\n\n        for (let person1 of personTeam1Data) {\n          shapeRenderer.rect(true, person1.x, person1.y, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT, Color.RED);\n        }\n\n        for (let person2 of personTeam2Data) {\n          shapeRenderer.rect(true, person2.x, person2.y, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT, Color.RED);\n        }\n      }\n\n      shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2PolygonShape","b2World","World","Color","PolygonBatch","ShapeRenderer","Constants","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createPerson","b2_dynamicBody","gl","getContext","camera","getCamera","batch","shapeRenderer","setYDown","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","ground","METER_TO_PHYSIC_WORLD","person1","PERSON_WIDTH","PERSON_HEIGHT","person2","register","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","begin","rect","WORLD_WIDTH","WORLD_HEIGHT","BLUE","RED","end","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Viewport,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + width / 2, y + width / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2);\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + width / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.SetUserData(\"person\");\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n\r\n  for (let ground of groundData) {\r\n    createGround(\r\n      physicWorld,\r\n      ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    createPerson(\r\n      physicWorld,\r\n      person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      person1.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      Constants.PERSON_WIDTH,\r\n      Constants.PERSON_HEIGHT\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    createPerson(\r\n      physicWorld,\r\n      person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      person2.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      Constants.PERSON_WIDTH,\r\n      Constants.PERSON_HEIGHT\r\n    );\r\n  }\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      shapeRenderer.begin();\r\n\r\n      shapeRenderer.rect(\r\n        true,\r\n        0,\r\n        0,\r\n        Constants.WORLD_WIDTH,\r\n        Constants.WORLD_HEIGHT\r\n      );\r\n\r\n      for (let ground of groundData) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          ground.x,\r\n          ground.y,\r\n          ground.width,\r\n          ground.height,\r\n          Color.BLUE\r\n        );\r\n\r\n        for (let person1 of personTeam1Data) {\r\n          shapeRenderer.rect(\r\n            true,\r\n            person1.x,\r\n            person1.y,\r\n            Constants.PERSON_WIDTH,\r\n            Constants.PERSON_HEIGHT,\r\n            Color.RED\r\n          );\r\n        }\r\n        for (let person2 of personTeam2Data) {\r\n          shapeRenderer.rect(\r\n            true,\r\n            person2.x,\r\n            person2.y,\r\n            Constants.PERSON_WIDTH,\r\n            Constants.PERSON_HEIGHT,\r\n            Color.RED\r\n          );\r\n        }\r\n      }\r\n      shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,cAAhC,EAAgDC,OAAhD,QAA+D,UAA/D;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAEEC,KAFF,EAGEC,YAHF,EAKEC,aALF,QAOO,OAPP;AAQA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,OAC9BC,YAD8B,EAE9BC,QAF8B,KAGV;EACpB,MAAMC,YAAY,GAAG,CACnBC,WADmB,EAEnBC,CAFmB,EAGnBC,CAHmB,EAInBC,KAJmB,EAKnBC,MALmB,KAMhB;IACH,MAAMC,OAAO,GAAG,IAAIlB,SAAJ,EAAhB;IACAkB,OAAO,CAACC,IAAR,GAAelB,UAAU,CAACmB,aAA1B;IACAF,OAAO,CAACG,QAAR,CAAiBC,GAAjB,CAAqBR,CAAC,GAAGE,KAAK,GAAG,CAAjC,EAAoCD,CAAC,GAAGC,KAAK,GAAG,CAAhD;IACA,MAAMO,IAAI,GAAGV,WAAW,CAACW,UAAZ,CAAuBN,OAAvB,CAAb;IACA,MAAMO,KAAK,GAAG,IAAIvB,cAAJ,EAAd;IACAuB,KAAK,CAACC,QAAN,CAAeV,KAAK,GAAG,CAAvB,EAA0BC,MAAM,GAAG,CAAnC;IACAM,IAAI,CAACI,WAAL,CAAiB,QAAjB;IACAJ,IAAI,CAACK,aAAL,CAAmBH,KAAnB;EACD,CAfD;;EAiBA,MAAMI,YAAY,GAAG,CACnBhB,WADmB,EAEnBC,CAFmB,EAGnBC,CAHmB,EAInBC,KAJmB,EAKnBC,MALmB,KAMhB;IACH,MAAMC,OAAO,GAAG,IAAIlB,SAAJ,EAAhB;IACAkB,OAAO,CAACC,IAAR,GAAelB,UAAU,CAAC6B,cAA1B;IACAZ,OAAO,CAACG,QAAR,CAAiBC,GAAjB,CAAqBR,CAAC,GAAGE,KAAK,GAAG,CAAjC,EAAoCD,CAAC,GAAGC,KAAK,GAAG,CAAhD;IACA,MAAMO,IAAI,GAAGV,WAAW,CAACW,UAAZ,CAAuBN,OAAvB,CAAb;IACAK,IAAI,CAACI,WAAL,CAAiB,QAAjB;IACA,OAAOJ,IAAP;EACD,CAbD;;EAeA,MAAMQ,EAAE,GAAGpB,QAAQ,CAACqB,UAAT,EAAX;EACA,MAAMC,MAAM,GAAGtB,QAAQ,CAACuB,SAAT,EAAf;EACA,MAAMC,KAAK,GAAG,IAAI7B,YAAJ,CAAiByB,EAAjB,CAAd;EACA,MAAMK,aAAa,GAAG,IAAI7B,aAAJ,CAAkBwB,EAAlB,CAAtB;EACAE,MAAM,CAACI,QAAP,CAAgB,IAAhB;EACAF,KAAK,CAACE,QAAN,CAAe,IAAf;EACAN,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;EAEA,MAAMC,KAAK,GAAG,IAAInC,KAAJ,EAAd;EACA,MAAMS,WAAW,GAAG,IAAIV,OAAJ,CAAY;IAC9BW,CAAC,EAAE,CAD2B;IAE9BC,CAAC,EAAE;EAF2B,CAAZ,CAApB;EAIA,MAAMyB,OAAO,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAL,CAAqBC,IAArB,CAA2BC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAnC,CAAtB;EACA,MAAMC,UAAU,GAAGL,OAAO,CAACM,MAAR,CAAeC,IAAf,CAChBC,CAAD,IAAYA,CAAC,CAACC,IAAF,KAAW,QADN,EAEjBC,OAFF;EAGA,MAAMC,eAAe,GAAGX,OAAO,CAACM,MAAR,CAAeC,IAAf,CACrBK,CAAD,IAAYA,CAAC,CAACH,IAAF,KAAW,OADD,EAEtBC,OAFF;EAGA,MAAMG,eAAe,GAAGb,OAAO,CAACM,MAAR,CAAeC,IAAf,CACrBK,CAAD,IAAYA,CAAC,CAACH,IAAF,KAAW,OADD,EAEtBC,OAFF;;EAIA,KAAK,IAAII,MAAT,IAAmBT,UAAnB,EAA+B;IAC7BjC,YAAY,CACVC,WADU,EAEVyC,MAAM,CAACxC,CAAP,GAAWN,SAAS,CAAC+C,qBAFX,EAGVD,MAAM,CAACvC,CAAP,GAAWP,SAAS,CAAC+C,qBAHX,EAIVD,MAAM,CAACtC,KAAP,GAAeR,SAAS,CAAC+C,qBAJf,EAKVD,MAAM,CAACrC,MAAP,GAAgBT,SAAS,CAAC+C,qBALhB,CAAZ;EAOD;;EACD,KAAK,IAAIC,OAAT,IAAoBL,eAApB,EAAqC;IACnCtB,YAAY,CACVhB,WADU,EAEV2C,OAAO,CAAC1C,CAAR,GAAYN,SAAS,CAAC+C,qBAFZ,EAGVC,OAAO,CAACzC,CAAR,GAAYP,SAAS,CAAC+C,qBAHZ,EAIV/C,SAAS,CAACiD,YAJA,EAKVjD,SAAS,CAACkD,aALA,CAAZ;EAOD;;EACD,KAAK,IAAIC,OAAT,IAAoBN,eAApB,EAAqC;IACnCxB,YAAY,CACVhB,WADU,EAEV8C,OAAO,CAAC7C,CAAR,GAAYN,SAAS,CAAC+C,qBAFZ,EAGVI,OAAO,CAAC5C,CAAR,GAAYP,SAAS,CAAC+C,qBAHZ,EAIV/C,SAAS,CAACiD,YAJA,EAKVjD,SAAS,CAACkD,aALA,CAAZ;EAOD;;EAEDnB,KAAK,CAACqB,QAAN,CAAe,IAAf,EAAqB7B,EAArB;EACAQ,KAAK,CAACqB,QAAN,CAAe,cAAf,EAA+BlD,YAA/B;EACA6B,KAAK,CAACqB,QAAN,CAAe,UAAf,EAA2BjD,QAA3B;EACA4B,KAAK,CAACqB,QAAN,CAAe,OAAf,EAAwBzB,KAAxB;EACAI,KAAK,CAACqB,QAAN,CAAe,aAAf,EAA8B/C,WAA9B;EACA,OAAO;IACLgD,MAAM,CAACC,KAAD,EAAgB;MACpB/B,EAAE,CAACgC,KAAH,CAAShC,EAAE,CAACiC,gBAAZ;MACA7B,KAAK,CAAC8B,aAAN,CAAoBhC,MAAM,CAACiC,QAA3B;MACA9B,aAAa,CAAC6B,aAAd,CAA4BhC,MAAM,CAACiC,QAAnC;MACA3B,KAAK,CAAC4B,QAAN,CAAeL,KAAf;MACAvB,KAAK,CAAC6B,mBAAN;MACA7B,KAAK,CAAC8B,oBAAN;MACAxD,WAAW,CAACyD,IAAZ,CAAiBR,KAAjB,EAAwB,CAAxB,EAA2B,CAA3B;MACA1B,aAAa,CAACmC,KAAd;MAEAnC,aAAa,CAACoC,IAAd,CACE,IADF,EAEE,CAFF,EAGE,CAHF,EAIEhE,SAAS,CAACiE,WAJZ,EAKEjE,SAAS,CAACkE,YALZ;;MAQA,KAAK,IAAIpB,MAAT,IAAmBT,UAAnB,EAA+B;QAC7BT,aAAa,CAACoC,IAAd,CACE,IADF,EAEElB,MAAM,CAACxC,CAFT,EAGEwC,MAAM,CAACvC,CAHT,EAIEuC,MAAM,CAACtC,KAJT,EAKEsC,MAAM,CAACrC,MALT,EAMEZ,KAAK,CAACsE,IANR;;QASA,KAAK,IAAInB,OAAT,IAAoBL,eAApB,EAAqC;UACnCf,aAAa,CAACoC,IAAd,CACE,IADF,EAEEhB,OAAO,CAAC1C,CAFV,EAGE0C,OAAO,CAACzC,CAHV,EAIEP,SAAS,CAACiD,YAJZ,EAKEjD,SAAS,CAACkD,aALZ,EAMErD,KAAK,CAACuE,GANR;QAQD;;QACD,KAAK,IAAIjB,OAAT,IAAoBN,eAApB,EAAqC;UACnCjB,aAAa,CAACoC,IAAd,CACE,IADF,EAEEb,OAAO,CAAC7C,CAFV,EAGE6C,OAAO,CAAC5C,CAHV,EAIEP,SAAS,CAACiD,YAJZ,EAKEjD,SAAS,CAACkD,aALZ,EAMErD,KAAK,CAACuE,GANR;QAQD;MACF;;MACDxC,aAAa,CAACyC,GAAd;IACD,CAnDI;;IAoDLC,OAAO,GAAS,CAAE;;EApDb,CAAP;AAsDD,CAnJM"},"metadata":{},"sourceType":"module"}