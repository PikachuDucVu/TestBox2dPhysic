{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { Color, PolygonBatch, ShapeRenderer } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (world, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + width / 2, y + width / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2);\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createPerson = (world, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + width / 2, y + width / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    body.SetUserData(\"person\");\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\");\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\");\n\n  for (let ground of groundData) {\n    createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, ground.y / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD);\n  } // for (let person1 of personTeam1Data) {\n  //   createGround(\n  //     physicWorld,\n  //     person1.x / Constants.METER_TO_PHYSIC_WORLD,\n  //     person1.y / Constants.METER_TO_PHYSIC_WORLD,\n  //     person1.width / Constants.METER_TO_PHYSIC_WORLD,\n  //     person1.height / Constants.METER_TO_PHYSIC_WORLD\n  //   );\n  // }\n\n\n  console.log(personTeam1Data);\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n      shapeRenderer.begin();\n      shapeRenderer.rect(true, 0, 0, Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT);\n\n      for (let ground of groundData) {\n        shapeRenderer.rect(true, ground.x, ground.y, ground.width, ground.height, Color.BLUE);\n      }\n\n      shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2PolygonShape","b2World","World","Color","PolygonBatch","ShapeRenderer","Constants","createGameScreen","assetManager","viewport","createGround","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","physicWorld","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createPerson","gl","getContext","camera","getCamera","batch","shapeRenderer","setYDown","clearColor","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","ground","METER_TO_PHYSIC_WORLD","console","log","register","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","begin","rect","WORLD_WIDTH","WORLD_HEIGHT","BLUE","end","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Viewport,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    world: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + width / 2, y + width / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2);\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createPerson = (\r\n    world: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + width / 2, y + width / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.SetUserData(\"person\");\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find((p: any) => p.name === \"Team1\");\r\n  const personTeam2Data = mapData.layers.find((p: any) => p.name === \"Team2\");\r\n\r\n  for (let ground of groundData) {\r\n    createGround(\r\n      physicWorld,\r\n      ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  }\r\n\r\n  // for (let person1 of personTeam1Data) {\r\n  //   createGround(\r\n  //     physicWorld,\r\n  //     person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n  //     person1.y / Constants.METER_TO_PHYSIC_WORLD,\r\n  //     person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n  //     person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n  //   );\r\n  // }\r\n\r\n  console.log(personTeam1Data);\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      shapeRenderer.begin();\r\n      shapeRenderer.rect(\r\n        true,\r\n        0,\r\n        0,\r\n        Constants.WORLD_WIDTH,\r\n        Constants.WORLD_HEIGHT\r\n      );\r\n      for (let ground of groundData) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          ground.x,\r\n          ground.y,\r\n          ground.width,\r\n          ground.height,\r\n          Color.BLUE\r\n        );\r\n      }\r\n      shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}