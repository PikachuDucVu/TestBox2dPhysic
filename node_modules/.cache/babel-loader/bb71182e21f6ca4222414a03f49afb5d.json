{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2;\n\nimport { b2BodyType, b2ShapeType } from \"box2d.ts\";\nimport { Inject, System } from \"flat-ecs\";\nimport { Color } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nexport let PhysicDebugSystem = (_dec = Inject(\"physicWorld\"), _dec2 = Inject(\"shapeRenderer\"), (_class = class PhysicDebugSystem extends System {\n  constructor() {\n    super(...arguments);\n\n    _initializerDefineProperty(this, \"physicWorld\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"shapeRenderer\", _descriptor2, this);\n\n    this.vertices = [];\n    this.debugColors = new Map();\n  }\n\n  initialized() {\n    this.debugColors.set(b2BodyType.b2_dynamicBody, Color.MAGENTA);\n    this.debugColors.set(b2BodyType.b2_kinematicBody, Color.GREEN);\n    this.debugColors.set(b2BodyType.b2_staticBody, Color.GREEN);\n    this.debugColors.set(b2BodyType.b2_unknown, Color.WHITE);\n  }\n\n  process() {\n    let body = this.physicWorld.GetBodyList();\n\n    while (body) {\n      const fixture = body.GetFixtureList();\n      const bodyType = body.GetType();\n\n      if (fixture) {\n        const type = fixture.GetType();\n\n        if (type === b2ShapeType.e_polygonShape) {\n          const data = fixture.GetShape();\n          this.vertices.length = 0;\n          const position = body.GetPosition();\n\n          for (let i = 0; i < data.m_vertices.length; i++) {\n            this.vertices.push((data.m_vertices[i].x + position.x) * Constants.METER_TO_PHYSIC_WORLD);\n            this.vertices.push((data.m_vertices[i].y + position.y) * Constants.METER_TO_PHYSIC_WORLD);\n          }\n\n          this.vertices.push(this.vertices[this.vertices.length - 2]);\n          this.vertices.push(this.vertices[1]);\n          this.shapeRenderer.begin();\n          this.shapeRenderer.rect(true, 0, 0, Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT);\n          this.shapeRenderer.polygon(this.vertices, 0, this.vertices.length, this.debugColors.get(bodyType));\n          this.shapeRenderer.end();\n        }\n      }\n\n      body = body.GetNext();\n    }\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"physicWorld\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"shapeRenderer\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["b2BodyType","b2ShapeType","Inject","System","Color","Constants","PhysicDebugSystem","vertices","debugColors","Map","initialized","set","b2_dynamicBody","MAGENTA","b2_kinematicBody","GREEN","b2_staticBody","b2_unknown","WHITE","process","body","physicWorld","GetBodyList","fixture","GetFixtureList","bodyType","GetType","type","e_polygonShape","data","GetShape","length","position","GetPosition","i","m_vertices","push","x","METER_TO_PHYSIC_WORLD","y","shapeRenderer","begin","rect","WORLD_WIDTH","WORLD_HEIGHT","polygon","get","end","GetNext"],"sources":["D:/projects/test-game/src/RenderSystem/physicDebugSystem.ts"],"sourcesContent":["import { b2BodyType, b2PolygonShape, b2ShapeType, b2World } from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport { Color, ShapeRenderer } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport class PhysicDebugSystem extends System {\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"shapeRenderer\") shapeRenderer: ShapeRenderer;\r\n  vertices: number[] = [];\r\n  debugColors: Map<b2BodyType, Color> = new Map<b2BodyType, Color>();\r\n  initialized() {\r\n    this.debugColors.set(b2BodyType.b2_dynamicBody, Color.MAGENTA);\r\n    this.debugColors.set(b2BodyType.b2_kinematicBody, Color.GREEN);\r\n    this.debugColors.set(b2BodyType.b2_staticBody, Color.GREEN);\r\n    this.debugColors.set(b2BodyType.b2_unknown, Color.WHITE);\r\n  }\r\n  process(): void {\r\n    let body = this.physicWorld.GetBodyList();\r\n    while (body) {\r\n      const fixture = body.GetFixtureList();\r\n      const bodyType = body.GetType();\r\n      if (fixture) {\r\n        const type = fixture.GetType();\r\n        if (type === b2ShapeType.e_polygonShape) {\r\n          const data = fixture.GetShape() as b2PolygonShape;\r\n          this.vertices.length = 0;\r\n          const position = body.GetPosition();\r\n          for (let i = 0; i < data.m_vertices.length; i++) {\r\n            this.vertices.push(\r\n              (data.m_vertices[i].x + position.x) *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n            this.vertices.push(\r\n              (data.m_vertices[i].y + position.y) *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          this.vertices.push(this.vertices[this.vertices.length - 2]);\r\n          this.vertices.push(this.vertices[1]);\r\n\r\n          this.shapeRenderer.begin();\r\n          this.shapeRenderer.rect(\r\n            true,\r\n            0,\r\n            0,\r\n            Constants.WORLD_WIDTH,\r\n            Constants.WORLD_HEIGHT\r\n          );\r\n          this.shapeRenderer.polygon(\r\n            this.vertices,\r\n            0,\r\n            this.vertices.length,\r\n            this.debugColors.get(bodyType)\r\n          );\r\n          this.shapeRenderer.end();\r\n        }\r\n      }\r\n      body = body.GetNext();\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}