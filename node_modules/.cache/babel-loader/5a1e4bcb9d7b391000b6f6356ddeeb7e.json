{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { Color, InputEvent, PolygonBatch, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + width / 2, y + width / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2);\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    body.SetUserData(\"person\");\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  let team1;\n  let team2;\n\n  for (let ground of groundData) {\n    team1.push(createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, ground.y / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person1 of personTeam1Data) {\n    createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, person1.y / Constants.METER_TO_PHYSIC_WORLD, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n  }\n\n  for (let person2 of personTeam2Data) {\n    createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, person2.y / Constants.METER_TO_PHYSIC_WORLD, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n  }\n\n  console.log(personTeam1Data);\n  const inputHandle = new ViewportInputHandler(viewport);\n  inputHandle.addEventListener(InputEvent.TouchStart, () => {});\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n      shapeRenderer.begin();\n      shapeRenderer.rect(true, 0, 0, Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT);\n\n      for (let ground of groundData) {\n        shapeRenderer.rect(true, ground.x, ground.y, ground.width, ground.height, Color.BLUE);\n\n        for (let person1 of personTeam1Data) {\n          shapeRenderer.rect(true, person1.x, person1.y, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT, Color.RED);\n        }\n\n        for (let person2 of personTeam2Data) {\n          shapeRenderer.rect(true, person2.x, person2.y, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT, Color.RED);\n        }\n      }\n\n      shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2PolygonShape","b2World","World","Color","InputEvent","PolygonBatch","ShapeRenderer","ViewportInputHandler","Constants","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createPerson","b2_dynamicBody","gl","getContext","camera","getCamera","batch","shapeRenderer","setYDown","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","team1","team2","ground","push","METER_TO_PHYSIC_WORLD","person1","PERSON_WIDTH","PERSON_HEIGHT","person2","console","log","inputHandle","addEventListener","TouchStart","register","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","begin","rect","WORLD_WIDTH","WORLD_HEIGHT","BLUE","RED","end","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  InputEvent,\r\n  InputHandler,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + width / 2, y + width / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2);\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.SetUserData(\"person\");\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n  let team1: b2Body[];\r\n  let team2: b2Body[];\r\n\r\n  for (let ground of groundData) {\r\n    team1.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.y / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    createPerson(\r\n      physicWorld,\r\n      person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      person1.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      Constants.PERSON_WIDTH,\r\n      Constants.PERSON_HEIGHT\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    createPerson(\r\n      physicWorld,\r\n      person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      person2.y / Constants.METER_TO_PHYSIC_WORLD,\r\n      Constants.PERSON_WIDTH,\r\n      Constants.PERSON_HEIGHT\r\n    );\r\n  }\r\n  console.log(personTeam1Data);\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n  inputHandle.addEventListener(InputEvent.TouchStart, () => {});\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      shapeRenderer.begin();\r\n\r\n      shapeRenderer.rect(\r\n        true,\r\n        0,\r\n        0,\r\n        Constants.WORLD_WIDTH,\r\n        Constants.WORLD_HEIGHT\r\n      );\r\n\r\n      for (let ground of groundData) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          ground.x,\r\n          ground.y,\r\n          ground.width,\r\n          ground.height,\r\n          Color.BLUE\r\n        );\r\n\r\n        for (let person1 of personTeam1Data) {\r\n          shapeRenderer.rect(\r\n            true,\r\n            person1.x,\r\n            person1.y,\r\n            Constants.PERSON_WIDTH,\r\n            Constants.PERSON_HEIGHT,\r\n            Color.RED\r\n          );\r\n        }\r\n        for (let person2 of personTeam2Data) {\r\n          shapeRenderer.rect(\r\n            true,\r\n            person2.x,\r\n            person2.y,\r\n            Constants.PERSON_WIDTH,\r\n            Constants.PERSON_HEIGHT,\r\n            Color.RED\r\n          );\r\n        }\r\n      }\r\n      shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}