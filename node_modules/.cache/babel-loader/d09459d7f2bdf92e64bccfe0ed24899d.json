{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport { b2BodyType } from \"box2d.ts\";\nimport { Inject, System } from \"flat-ecs\";\nimport { InputEvent } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nexport let InputHandlerSystem = (_dec = Inject(\"balls\"), _dec2 = Inject(\"inputHandle\"), _dec3 = Inject(\"originPosition\"), _dec4 = Inject(\"dragPositioning\"), (_class = class InputHandlerSystem extends System {\n  constructor() {\n    super(...arguments);\n\n    _initializerDefineProperty(this, \"balls\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"inputHandle\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"originPosition\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"dragPositioning\", _descriptor4, this);\n  }\n\n  initialized() {\n    this.inputHandle.addEventListener(InputEvent.TouchMove, () => {\n      if (this.inputHandle.isTouched()) {\n        this.dragPositioning.setVector(this.inputHandle.getTouchedWorldCoord());\n      }\n    });\n    this.inputHandle.addEventListener(InputEvent.TouchEnd, () => {\n      for (let ball of this.balls) {\n        ball.SetType(b2BodyType.b2_dynamicBody);\n        ball.ApplyLinearImpulseToCenter({\n          x: 5 * (Constants.WORLD_HEIGHT - this.originPosition.x - this.dragPositioning.x) / Constants.METER_TO_PHYSIC_WORLD,\n          y: 5 * (Constants.WORLD_HEIGHT - this.originPosition.y - this.dragPositioning.y) / Constants.METER_TO_PHYSIC_WORLD\n        });\n      }\n    });\n  }\n\n  process() {}\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"balls\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"inputHandle\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"originPosition\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"dragPositioning\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["b2BodyType","Inject","System","InputEvent","Constants","InputHandlerSystem","initialized","inputHandle","addEventListener","TouchMove","isTouched","dragPositioning","setVector","getTouchedWorldCoord","TouchEnd","ball","balls","SetType","b2_dynamicBody","ApplyLinearImpulseToCenter","x","WORLD_HEIGHT","originPosition","METER_TO_PHYSIC_WORLD","y","process"],"sources":["D:/projects/test-game/src/System/inputHandlerSystem.ts"],"sourcesContent":["import { b2Body, b2BodyType } from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport { InputEvent, Vector2, ViewportInputHandler } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport class InputHandlerSystem extends System {\r\n  @Inject(\"balls\") balls: b2Body[];\r\n  @Inject(\"inputHandle\") inputHandle: ViewportInputHandler;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"dragPositioning\") dragPositioning: Vector2;\r\n\r\n  initialized() {\r\n    this.inputHandle.addEventListener(InputEvent.TouchMove, () => {\r\n      if (this.inputHandle.isTouched()) {\r\n        this.dragPositioning.setVector(this.inputHandle.getTouchedWorldCoord());\r\n      }\r\n    });\r\n\r\n    this.inputHandle.addEventListener(InputEvent.TouchEnd, () => {\r\n      for (let ball of this.balls) {\r\n        ball.SetType(b2BodyType.b2_dynamicBody);\r\n        ball.ApplyLinearImpulseToCenter({\r\n          x:\r\n            (5 *\r\n              (Constants.WORLD_HEIGHT -\r\n                this.originPosition.x -\r\n                this.dragPositioning.x)) /\r\n            Constants.METER_TO_PHYSIC_WORLD,\r\n          y:\r\n            (5 *\r\n              (Constants.WORLD_HEIGHT -\r\n                this.originPosition.y -\r\n                this.dragPositioning.y)) /\r\n            Constants.METER_TO_PHYSIC_WORLD,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  process(): void {}\r\n}\r\n"],"mappings":";;;;;;AAAA,SAAiBA,UAAjB,QAAmC,UAAnC;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAASC,UAAT,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,WAAaC,kBAAb,WACGJ,MAAM,CAAC,OAAD,CADT,UAEGA,MAAM,CAAC,aAAD,CAFT,UAGGA,MAAM,CAAC,gBAAD,CAHT,UAIGA,MAAM,CAAC,iBAAD,CAJT,YAAO,MAAMI,kBAAN,SAAiCH,MAAjC,CAAwC;EAAA;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;EAAA;;EAM7CI,WAAW,GAAG;IACZ,KAAKC,WAAL,CAAiBC,gBAAjB,CAAkCL,UAAU,CAACM,SAA7C,EAAwD,MAAM;MAC5D,IAAI,KAAKF,WAAL,CAAiBG,SAAjB,EAAJ,EAAkC;QAChC,KAAKC,eAAL,CAAqBC,SAArB,CAA+B,KAAKL,WAAL,CAAiBM,oBAAjB,EAA/B;MACD;IACF,CAJD;IAMA,KAAKN,WAAL,CAAiBC,gBAAjB,CAAkCL,UAAU,CAACW,QAA7C,EAAuD,MAAM;MAC3D,KAAK,IAAIC,IAAT,IAAiB,KAAKC,KAAtB,EAA6B;QAC3BD,IAAI,CAACE,OAAL,CAAajB,UAAU,CAACkB,cAAxB;QACAH,IAAI,CAACI,0BAAL,CAAgC;UAC9BC,CAAC,EACE,KACEhB,SAAS,CAACiB,YAAV,GACC,KAAKC,cAAL,CAAoBF,CADrB,GAEC,KAAKT,eAAL,CAAqBS,CAHxB,CAAD,GAIAhB,SAAS,CAACmB,qBANkB;UAO9BC,CAAC,EACE,KACEpB,SAAS,CAACiB,YAAV,GACC,KAAKC,cAAL,CAAoBE,CADrB,GAEC,KAAKb,eAAL,CAAqBa,CAHxB,CAAD,GAIApB,SAAS,CAACmB;QAZkB,CAAhC;MAcD;IACF,CAlBD;EAmBD;;EAEDE,OAAO,GAAS,CAAE;;AAlC2B,CAA/C;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}