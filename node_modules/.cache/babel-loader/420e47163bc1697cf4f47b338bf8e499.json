{"ast":null,"code":"import { b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { PolygonBatch, ShapeRenderer, Vector2, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\nimport { createBall, createGround, createPerson } from \"../System/utils\";\nconst MAP_HEIGHT = 1000; // map height\n\nexport const createGameScreen = async (assetManager, viewport) => {\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: -10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  const ball1 = mapData.layers.find(b => b.name === \"ball1\").objects;\n  let grounds = [];\n  let Team1 = [];\n  let Team2 = [];\n  let ballsTeam1 = [];\n  let ballsTeam2 = [];\n  console.log(ball1);\n\n  for (let box of ball1) {\n    ballsTeam1.push(createBall(physicWorld, box.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD, 0.5));\n  }\n\n  for (let ground of groundData) {\n    grounds.push(createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person1 of personTeam1Data) {\n    Team1.push(createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD, person1.width / Constants.METER_TO_PHYSIC_WORLD, person1.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person2 of personTeam2Data) {\n    Team2.push(createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD, person2.width / Constants.METER_TO_PHYSIC_WORLD, person2.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  const inputHandle = new ViewportInputHandler(viewport);\n  const originPosition = new Vector2(ballsTeam1[1].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD, ballsTeam1[1].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD);\n  let dragPositioning = new Vector2(ballsTeam1[1].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD, ballsTeam1[1].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD);\n  world.register(\"gl\", gl);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"inputHandle\", inputHandle);\n  world.register(\"groundData\", groundData);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.register(\"Team1\", Team1);\n  world.register(\"Team2\", Team2);\n  world.register(\"ballsTeam1\", ballsTeam1);\n  world.register(\"originPosition\", originPosition);\n  world.register(\"dragPositioning\", dragPositioning);\n  world.addSystem(new PhysicDebugSystem(), false);\n  world.addSystem(new RenderSystem(), true);\n  world.addSystem(new InputHandlerSystem(), true);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2World","World","PolygonBatch","ShapeRenderer","Vector2","ViewportInputHandler","Constants","PhysicDebugSystem","RenderSystem","InputHandlerSystem","createBall","createGround","createPerson","MAP_HEIGHT","createGameScreen","assetManager","viewport","gl","getContext","camera","getCamera","batch","shapeRenderer","clearColor","world","physicWorld","x","y","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","ball1","b","grounds","Team1","Team2","ballsTeam1","ballsTeam2","console","log","box","push","METER_TO_PHYSIC_WORLD","ground","width","height","person1","person2","inputHandle","originPosition","GetPosition","dragPositioning","register","addSystem","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import { b2Body, b2World } from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\r\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\r\nimport { createBall, createGround, createPerson } from \"../System/utils\";\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n\r\n  const ball1 = mapData.layers.find((b: any) => b.name === \"ball1\").objects;\r\n  let grounds: b2Body[] = [];\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n  let ballsTeam1: b2Body[] = [];\r\n  let ballsTeam2: b2Body[] = [];\r\n  console.log(ball1);\r\n  for (let box of ball1) {\r\n    ballsTeam1.push(\r\n      createBall(\r\n        physicWorld,\r\n        box.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        0.5\r\n      )\r\n    );\r\n  }\r\n\r\n  for (let ground of groundData) {\r\n    grounds.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    Team1.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    Team2.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n\r\n  const originPosition = new Vector2(\r\n    ballsTeam1[1].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n    ballsTeam1[1].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n  );\r\n  let dragPositioning = new Vector2(\r\n    ballsTeam1[1].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n    ballsTeam1[1].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n  );\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"inputHandle\", inputHandle);\r\n  world.register(\"groundData\", groundData);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"Team1\", Team1);\r\n  world.register(\"Team2\", Team2);\r\n  world.register(\"ballsTeam1\", ballsTeam1);\r\n  world.register(\"originPosition\", originPosition);\r\n  world.register(\"dragPositioning\", dragPositioning);\r\n\r\n  world.addSystem(new PhysicDebugSystem(), false);\r\n  world.addSystem(new RenderSystem(), true);\r\n  world.addSystem(new InputHandlerSystem(), true);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}