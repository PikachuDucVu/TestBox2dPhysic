{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { InputEvent, PolygonBatch, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\nconst MAP_HEIGHT = 1000; // map height\n\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const createBall = (physicWorld, x, y, radius) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\n    const circle = new b2CircleShape();\n    circle.m_radius = radius;\n    const fixtureDef = new b2FixtureDef();\n    fixtureDef.shape = circle;\n    fixtureDef.restitution = 0.25; // bounce bird\n\n    fixtureDef.friction = 1;\n    fixtureDef.shape = circle;\n    const body = physicWorld.CreateBody(bodyDef);\n    body.CreateFixture(fixtureDef);\n    body.SetUserData(\"ball\");\n    return body;\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"person\");\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: -10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  const ball = mapData.layers.find(b => b.name === \"ball\").objects;\n  let grounds = [];\n  let Team1 = [];\n  let Team2 = [];\n  let balls = [];\n\n  for (let box of ball) {\n    balls.push(createBall(physicWorld, box.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD, 0.5));\n  }\n\n  for (let ground of groundData) {\n    grounds.push(createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person1 of personTeam1Data) {\n    Team1.push(createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD, person1.width / Constants.METER_TO_PHYSIC_WORLD, person1.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person2 of personTeam2Data) {\n    Team2.push(createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD, person2.width / Constants.METER_TO_PHYSIC_WORLD, person2.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  const inputHandle = new ViewportInputHandler(viewport);\n  inputHandle.addEventListener(InputEvent.TouchStart, () => {\n    Team1[0].ApplyLinearImpulseToCenter({\n      x: 5,\n      y: 5\n    }, true);\n  });\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.addSystem(new PhysicDebugSystem(), true);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n      shapeRenderer.begin();\n\n      for (let ground of grounds) {\n        shapeRenderer.rect(true, ground.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - ground.GetPosition().y) * Constants.METER_TO_PHYSIC_WORLD, ground.width * Constants.METER_TO_PHYSIC_WORLD, ground.height * Constants.METER_TO_PHYSIC_WORLD);\n      }\n\n      for (let player of Team1) {\n        shapeRenderer.rect(true, player.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD, player.GetPosition().y * Constants.METER_TO_PHYSIC_WORLD - 150, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n      }\n\n      for (let player of Team2) {\n        shapeRenderer.rect(true, player.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD, player.GetPosition().y * Constants.METER_TO_PHYSIC_WORLD - 150, Constants.PERSON_WIDTH, Constants.PERSON_HEIGHT);\n      }\n\n      shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2FixtureDef","b2PolygonShape","b2World","World","InputEvent","PolygonBatch","ShapeRenderer","ViewportInputHandler","Constants","PhysicDebugSystem","MAP_HEIGHT","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","b2_dynamicBody","circle","m_radius","fixtureDef","restitution","friction","createPerson","gl","getContext","camera","getCamera","batch","shapeRenderer","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","ball","b","grounds","Team1","Team2","balls","box","push","METER_TO_PHYSIC_WORLD","ground","person1","person2","inputHandle","addEventListener","TouchStart","ApplyLinearImpulseToCenter","register","addSystem","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","begin","rect","GetPosition","player","PERSON_WIDTH","PERSON_HEIGHT","end","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2ShapeType,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  InputEvent,\r\n  InputHandler,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x, y);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n  const createBall = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    radius: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n    const circle = new b2CircleShape();\r\n    circle.m_radius = radius;\r\n    const fixtureDef = new b2FixtureDef();\r\n    fixtureDef.shape = circle;\r\n    fixtureDef.restitution = 0.25; // bounce bird\r\n    fixtureDef.friction = 1;\r\n    fixtureDef.shape = circle;\r\n\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.CreateFixture(fixtureDef);\r\n    body.SetUserData(\"ball\");\r\n    return body;\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"person\");\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n  const ball = mapData.layers.find((b: any) => b.name === \"ball\").objects;\r\n  let grounds: b2Body[] = [];\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n  let balls: b2Body[] = [];\r\n\r\n  for (let box of ball) {\r\n    balls.push(\r\n      createBall(\r\n        physicWorld,\r\n        box.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        0.5\r\n      )\r\n    );\r\n  }\r\n\r\n  for (let ground of groundData) {\r\n    grounds.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    Team1.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    Team2.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n  inputHandle.addEventListener(InputEvent.TouchStart, () => {\r\n    Team1[0].ApplyLinearImpulseToCenter(\r\n      {\r\n        x: 5,\r\n        y: 5,\r\n      },\r\n      true\r\n    );\r\n  });\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n\r\n  world.addSystem(new PhysicDebugSystem(), true);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      shapeRenderer.begin();\r\n      for (let ground of grounds) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          ground.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n          (MAP_HEIGHT - ground.GetPosition().y) *\r\n            Constants.METER_TO_PHYSIC_WORLD,\r\n          ground.width * Constants.METER_TO_PHYSIC_WORLD,\r\n          ground.height * Constants.METER_TO_PHYSIC_WORLD\r\n        );\r\n      }\r\n      for (let player of Team1) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          player.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n          player.GetPosition().y * Constants.METER_TO_PHYSIC_WORLD - 150,\r\n          Constants.PERSON_WIDTH,\r\n          Constants.PERSON_HEIGHT\r\n        );\r\n      }\r\n      for (let player of Team2) {\r\n        shapeRenderer.rect(\r\n          true,\r\n          player.GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n          player.GetPosition().y * Constants.METER_TO_PHYSIC_WORLD - 150,\r\n          Constants.PERSON_WIDTH,\r\n          Constants.PERSON_HEIGHT\r\n        );\r\n      }\r\n      shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}