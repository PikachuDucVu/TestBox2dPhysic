{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { PolygonBatch, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\nconst MAP_HEIGHT = 1000; // map height\n\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const createBall = (physicWorld, x, y, radius) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\n    const circle = new b2CircleShape();\n    circle.m_radius = radius;\n    const fixtureDef = new b2FixtureDef();\n    fixtureDef.shape = circle;\n    fixtureDef.restitution = 0.25; // bounce bird\n\n    fixtureDef.friction = 1;\n    fixtureDef.shape = circle;\n    const body = physicWorld.CreateBody(bodyDef);\n    body.CreateFixture(fixtureDef);\n    body.SetUserData(\"ball\");\n    return body;\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"person\");\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: -10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  const ball = mapData.layers.find(b => b.name === \"ball\").objects;\n  let grounds = [];\n  let Team1 = [];\n  let Team2 = [];\n  let balls = [];\n\n  for (let box of ball) {\n    balls.push(createBall(physicWorld, box.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD, 0.5));\n  }\n\n  for (let ground of groundData) {\n    grounds.push(createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person1 of personTeam1Data) {\n    Team1.push(createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD, person1.width / Constants.METER_TO_PHYSIC_WORLD, person1.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person2 of personTeam2Data) {\n    Team2.push(createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD, person2.width / Constants.METER_TO_PHYSIC_WORLD, person2.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  const inputHandle = new ViewportInputHandler(viewport);\n  world.register(\"gl\", gl);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"inputHandle\", inputHandle);\n  world.register(\"groundData\", groundData);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.register(\"Team1\", Team1);\n  world.register(\"Team2\", Team2);\n  world.register(\"balls\", balls);\n  world.addSystem(new PhysicDebugSystem(), true);\n  world.addSystem(new RenderSystem(), true);\n  world.addSystem(new InputHandlerSystem(), true);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2FixtureDef","b2PolygonShape","b2World","World","PolygonBatch","ShapeRenderer","ViewportInputHandler","Constants","PhysicDebugSystem","RenderSystem","InputHandlerSystem","MAP_HEIGHT","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","b2_dynamicBody","circle","m_radius","fixtureDef","restitution","friction","createPerson","gl","getContext","camera","getCamera","batch","shapeRenderer","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","ball","b","grounds","Team1","Team2","balls","box","push","METER_TO_PHYSIC_WORLD","ground","person1","person2","inputHandle","register","addSystem","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\r\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x, y);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n  const createBall = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    radius: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n    const circle = new b2CircleShape();\r\n    circle.m_radius = radius;\r\n    const fixtureDef = new b2FixtureDef();\r\n    fixtureDef.shape = circle;\r\n    fixtureDef.restitution = 0.25; // bounce bird\r\n    fixtureDef.friction = 1;\r\n    fixtureDef.shape = circle;\r\n\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.CreateFixture(fixtureDef);\r\n    body.SetUserData(\"ball\");\r\n    return body;\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"person\");\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n  const ball = mapData.layers.find((b: any) => b.name === \"ball\").objects;\r\n  let grounds: b2Body[] = [];\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n  let balls: b2Body[] = [];\r\n\r\n  for (let box of ball) {\r\n    balls.push(\r\n      createBall(\r\n        physicWorld,\r\n        box.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - box.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        0.5\r\n      )\r\n    );\r\n  }\r\n\r\n  for (let ground of groundData) {\r\n    grounds.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    Team1.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    Team2.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"inputHandle\", inputHandle);\r\n  world.register(\"groundData\", groundData);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"Team1\", Team1);\r\n  world.register(\"Team2\", Team2);\r\n  world.register(\"balls\", balls);\r\n\r\n  world.addSystem(new PhysicDebugSystem(), true);\r\n  world.addSystem(new RenderSystem(), true);\r\n  world.addSystem(new InputHandlerSystem(), true);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}