{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2PolygonShape, b2ShapeType, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { Color, PolygonBatch, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nconst MAP_HEIGHT = 1000; // map height\n\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    console.log(x, y);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    body.SetUserData(\"person\");\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: 100\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  let Team1 = [];\n  let Team2 = [];\n  console.log(mapData);\n\n  for (let ground of groundData) {\n    console.log(ground);\n    createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, (ground.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD);\n  } // for (let person1 of personTeam1Data) {\n  //   Team1.push(\n  //     createPerson(\n  //       physicWorld,\n  //       person1.x / Constants.METER_TO_PHYSIC_WORLD,\n  //       (person1.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD,\n  //       person1.width / Constants.METER_TO_PHYSIC_WORLD,\n  //       person1.height / Constants.METER_TO_PHYSIC_WORLD\n  //     )\n  //   );\n  // }\n  // for (let person2 of personTeam2Data) {\n  //   Team2.push(\n  //     createPerson(\n  //       physicWorld,\n  //       person2.x / Constants.METER_TO_PHYSIC_WORLD,\n  //       (person2.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD,\n  //       person2.width / Constants.METER_TO_PHYSIC_WORLD,\n  //       person2.height / Constants.METER_TO_PHYSIC_WORLD\n  //     )\n  //   );\n  // }\n\n\n  console.log(personTeam1Data);\n  const inputHandle = new ViewportInputHandler(viewport); // inputHandle.addEventListener(InputEvent.TouchStart, () => {\n  //   Team1[0].ApplyLinearImpulseToCenter(\n  //     {\n  //       x: 5,\n  //       y: 5,\n  //     },\n  //     true\n  //   );\n  // });\n\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  const vertices = [];\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n      shapeRenderer.begin();\n      let body = physicWorld.GetBodyList();\n\n      while (body) {\n        const fixture = body.GetFixtureList();\n\n        if (fixture) {\n          const type = fixture.GetType();\n\n          if (type === b2ShapeType.e_polygonShape) {\n            const data = fixture.GetShape();\n            vertices.length = 0;\n            const position = body.GetPosition();\n\n            for (let i = 0; i < data.m_vertices.length; i++) {\n              vertices.push((data.m_vertices[i].x + position.x) * Constants.METER_TO_PHYSIC_WORLD);\n              vertices.push((data.m_vertices[i].y + position.y) * Constants.METER_TO_PHYSIC_WORLD);\n            }\n\n            vertices.push(vertices[vertices.length - 2]);\n            vertices.push(vertices[1]);\n            shapeRenderer.polygon(vertices, 0, vertices.length, Color.BLUE);\n          }\n        }\n\n        body = body.GetNext();\n      } // for (let ground of groundData) {\n      //   shapeRenderer.rect(\n      //     true,\n      //     ground.x * Constants.METER_TO_PHYSIC_WORLD,\n      //     ground.y * Constants.METER_TO_PHYSIC_WORLD,\n      //     ground.width * Constants.METER_TO_PHYSIC_WORLD,\n      //     ground.height * Constants.METER_TO_PHYSIC_WORLD,\n      //     Color.BLUE\n      //   );\n      // }\n      // for (let i = 0; i < Team1.length; i++) {\n      //   shapeRenderer.rect(\n      //     true,\n      //     Team1[i].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\n      //     Team1[i].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD,\n      //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\n      //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\n      //     Color.RED\n      //   );\n      // }\n      // for (let person2 of personTeam2Data) {\n      //   shapeRenderer.rect(\n      //     true,\n      //     person2.x * Constants.METER_TO_PHYSIC_WORLD,\n      //     person2.y * Constants.METER_TO_PHYSIC_WORLD,\n      //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\n      //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\n      //     Color.RED\n      //   );\n      // }\n\n\n      shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2PolygonShape","b2ShapeType","b2World","World","Color","PolygonBatch","ShapeRenderer","ViewportInputHandler","Constants","MAP_HEIGHT","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","console","log","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createPerson","b2_dynamicBody","gl","getContext","camera","getCamera","batch","shapeRenderer","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","Team1","Team2","ground","METER_TO_PHYSIC_WORLD","MAP_OFFSET","inputHandle","register","vertices","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","begin","GetBodyList","fixture","GetFixtureList","GetType","e_polygonShape","data","GetShape","length","GetPosition","i","m_vertices","push","polygon","BLUE","GetNext","end","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2PolygonShape,\r\n  b2ShapeType,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  InputEvent,\r\n  InputHandler,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x, y);\r\n    console.log(x, y);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    body.SetUserData(\"person\");\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 100,\r\n  });\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n\r\n  console.log(mapData);\r\n  for (let ground of groundData) {\r\n    console.log(ground);\r\n    createGround(\r\n      physicWorld,\r\n      ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      (ground.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  }\r\n  // for (let person1 of personTeam1Data) {\r\n  //   Team1.push(\r\n  //     createPerson(\r\n  //       physicWorld,\r\n  //       person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       (person1.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n  //     )\r\n  //   );\r\n  // }\r\n  // for (let person2 of personTeam2Data) {\r\n  //   Team2.push(\r\n  //     createPerson(\r\n  //       physicWorld,\r\n  //       person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       (person2.y + MAP_OFFSET) / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       person2.width / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       person2.height / Constants.METER_TO_PHYSIC_WORLD\r\n  //     )\r\n  //   );\r\n  // }\r\n  console.log(personTeam1Data);\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n  // inputHandle.addEventListener(InputEvent.TouchStart, () => {\r\n  //   Team1[0].ApplyLinearImpulseToCenter(\r\n  //     {\r\n  //       x: 5,\r\n  //       y: 5,\r\n  //     },\r\n  //     true\r\n  //   );\r\n  // });\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n\r\n  const vertices: number[] = [];\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      shapeRenderer.begin();\r\n\r\n      let body = physicWorld.GetBodyList();\r\n      while (body) {\r\n        const fixture = body.GetFixtureList();\r\n        if (fixture) {\r\n          const type = fixture.GetType();\r\n          if (type === b2ShapeType.e_polygonShape) {\r\n            const data = fixture.GetShape() as b2PolygonShape;\r\n            vertices.length = 0;\r\n            const position = body.GetPosition();\r\n            for (let i = 0; i < data.m_vertices.length; i++) {\r\n              vertices.push(\r\n                (data.m_vertices[i].x + position.x) *\r\n                  Constants.METER_TO_PHYSIC_WORLD\r\n              );\r\n              vertices.push(\r\n                (data.m_vertices[i].y + position.y) *\r\n                  Constants.METER_TO_PHYSIC_WORLD\r\n              );\r\n            }\r\n            vertices.push(vertices[vertices.length - 2]);\r\n            vertices.push(vertices[1]);\r\n\r\n            shapeRenderer.polygon(vertices, 0, vertices.length, Color.BLUE);\r\n          }\r\n        }\r\n        body = body.GetNext();\r\n      }\r\n      // for (let ground of groundData) {\r\n      //   shapeRenderer.rect(\r\n      //     true,\r\n      //     ground.x * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     ground.y * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     ground.width * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     ground.height * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Color.BLUE\r\n      //   );\r\n      // }\r\n\r\n      // for (let i = 0; i < Team1.length; i++) {\r\n      //   shapeRenderer.rect(\r\n      //     true,\r\n      //     Team1[i].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Team1[i].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Color.RED\r\n      //   );\r\n      // }\r\n\r\n      // for (let person2 of personTeam2Data) {\r\n      //   shapeRenderer.rect(\r\n      //     true,\r\n      //     person2.x * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     person2.y * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\r\n      //     Color.RED\r\n      //   );\r\n      // }\r\n      shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}