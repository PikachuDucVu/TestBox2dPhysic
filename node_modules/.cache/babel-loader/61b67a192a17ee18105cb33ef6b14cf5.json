{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { PolygonBatch, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constant\";\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\nconst MAP_HEIGHT = 1000; // map height\n\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createGround = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createPerson = (physicWorld, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = physicWorld.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2, {\n      x: width / 2,\n      y: -height / 2\n    });\n    body.SetUserData(\"person\");\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  gl.clearColor(0, 0, 0, 1);\n  const world = new World();\n  const physicWorld = new b2World({\n    x: 0,\n    y: -10\n  });\n  const mapData = await fetch(\"./datas.tmj\").then(res => res.json());\n  const groundData = mapData.layers.find(w => w.name === \"Ground\").objects;\n  const personTeam1Data = mapData.layers.find(p => p.name === \"Team1\").objects;\n  const personTeam2Data = mapData.layers.find(p => p.name === \"Team2\").objects;\n  let Team1 = [];\n  let Team2 = [];\n\n  for (let ground of groundData) {\n    createGround(physicWorld, ground.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD, ground.width / Constants.METER_TO_PHYSIC_WORLD, ground.height / Constants.METER_TO_PHYSIC_WORLD);\n  }\n\n  for (let person1 of personTeam1Data) {\n    console.log(person1);\n    Team1.push(createPerson(physicWorld, person1.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD, person1.width / Constants.METER_TO_PHYSIC_WORLD, person1.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  for (let person2 of personTeam2Data) {\n    Team2.push(createPerson(physicWorld, person2.x / Constants.METER_TO_PHYSIC_WORLD, (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD, person2.width / Constants.METER_TO_PHYSIC_WORLD, person2.height / Constants.METER_TO_PHYSIC_WORLD));\n  }\n\n  const inputHandle = new ViewportInputHandler(viewport); // inputHandle.addEventListener(InputEvent.TouchStart, () => {\n  //   Team1[0].ApplyLinearImpulseToCenter(\n  //     {\n  //       x: 5,\n  //       y: 5,\n  //     },\n  //     true\n  //   );\n  // });\n\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.addSystem(new PhysicDebugSystem(), true);\n  return {\n    update(delta) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3); // shapeRenderer.begin();\n      // // for (let ground of groundData) {\n      // //   shapeRenderer.rect(\n      // //     true,\n      // //     ground.x * Constants.METER_TO_PHYSIC_WORLD,\n      // //     ground.y * Constants.METER_TO_PHYSIC_WORLD,\n      // //     ground.width * Constants.METER_TO_PHYSIC_WORLD,\n      // //     ground.height * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Color.BLUE\n      // //   );\n      // // }\n      // // for (let i = 0; i < Team1.length; i++) {\n      // //   shapeRenderer.rect(\n      // //     true,\n      // //     Team1[i].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Team1[i].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Color.RED\n      // //   );\n      // // }\n      // // for (let person2 of personTeam2Data) {\n      // //   shapeRenderer.rect(\n      // //     true,\n      // //     person2.x * Constants.METER_TO_PHYSIC_WORLD,\n      // //     person2.y * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\n      // //     Color.RED\n      // //   );\n      // // }\n      // shapeRenderer.end();\n    },\n\n    dispose() {}\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2PolygonShape","b2World","World","PolygonBatch","ShapeRenderer","ViewportInputHandler","Constants","PhysicDebugSystem","MAP_HEIGHT","createGameScreen","assetManager","viewport","createGround","physicWorld","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createPerson","b2_dynamicBody","gl","getContext","camera","getCamera","batch","shapeRenderer","clearColor","world","mapData","fetch","then","res","json","groundData","layers","find","w","name","objects","personTeam1Data","p","personTeam2Data","Team1","Team2","ground","METER_TO_PHYSIC_WORLD","person1","console","log","push","person2","inputHandle","register","addSystem","update","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","dispose"],"sources":["D:/projects/test-game/src/GameScreen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2PolygonShape,\r\n  b2ShapeType,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  InputEvent,\r\n  InputHandler,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createGround = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x, y);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createPerson = (\r\n    physicWorld: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = physicWorld.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n    body.SetUserData(\"person\");\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n  const mapData = await fetch(\"./datas.tmj\").then((res) => res.json());\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  const personTeam1Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team1\"\r\n  ).objects;\r\n  const personTeam2Data = mapData.layers.find(\r\n    (p: any) => p.name === \"Team2\"\r\n  ).objects;\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n\r\n  for (let ground of groundData) {\r\n    createGround(\r\n      physicWorld,\r\n      ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n      ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  }\r\n  for (let person1 of personTeam1Data) {\r\n    console.log(person1);\r\n    Team1.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person1.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person1.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person1.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  for (let person2 of personTeam2Data) {\r\n    Team2.push(\r\n      createPerson(\r\n        physicWorld,\r\n        person2.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - person2.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        person2.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  const inputHandle = new ViewportInputHandler(viewport);\r\n  // inputHandle.addEventListener(InputEvent.TouchStart, () => {\r\n  //   Team1[0].ApplyLinearImpulseToCenter(\r\n  //     {\r\n  //       x: 5,\r\n  //       y: 5,\r\n  //     },\r\n  //     true\r\n  //   );\r\n  // });\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n\r\n  world.addSystem(new PhysicDebugSystem(), true);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      // shapeRenderer.begin();\r\n\r\n      // // for (let ground of groundData) {\r\n      // //   shapeRenderer.rect(\r\n      // //     true,\r\n      // //     ground.x * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     ground.y * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     ground.width * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     ground.height * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Color.BLUE\r\n      // //   );\r\n      // // }\r\n\r\n      // // for (let i = 0; i < Team1.length; i++) {\r\n      // //   shapeRenderer.rect(\r\n      // //     true,\r\n      // //     Team1[i].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Team1[i].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Color.RED\r\n      // //   );\r\n      // // }\r\n\r\n      // // for (let person2 of personTeam2Data) {\r\n      // //   shapeRenderer.rect(\r\n      // //     true,\r\n      // //     person2.x * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     person2.y * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Constants.PERSON_WIDTH * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Constants.PERSON_HEIGHT * Constants.METER_TO_PHYSIC_WORLD,\r\n      // //     Color.RED\r\n      // //   );\r\n      // // }\r\n      // shapeRenderer.end();\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}