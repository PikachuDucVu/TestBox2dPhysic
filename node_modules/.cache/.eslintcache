[{"D:\\projects\\test-game\\src\\index.ts":"1","D:\\projects\\test-game\\src\\Constant.ts":"2","D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts":"3","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts":"4","D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts":"5","D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts":"6","D:\\projects\\test-game\\src\\System\\utils.ts":"7","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts":"8","D:\\projects\\test-game\\src\\System\\ContactListener.ts":"9","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts":"10","D:\\projects\\test-game\\src\\System\\CameraGame.ts":"11","D:\\projects\\test-game\\src\\System\\CreateHuman.ts":"12"},{"size":979,"mtime":1666838808937,"results":"13","hashOfConfig":"14"},{"size":1254,"mtime":1669971349391,"results":"15","hashOfConfig":"14"},{"size":12605,"mtime":1669972016306,"results":"16","hashOfConfig":"14"},{"size":4211,"mtime":1669624667951,"results":"17","hashOfConfig":"14"},{"size":1924,"mtime":1667201340839,"results":"18","hashOfConfig":"14"},{"size":7613,"mtime":1669887725961,"results":"19","hashOfConfig":"14"},{"size":8361,"mtime":1669958729555,"results":"20","hashOfConfig":"14"},{"size":5776,"mtime":1669972313325,"results":"21","hashOfConfig":"14"},{"size":2267,"mtime":1669971198197,"results":"22","hashOfConfig":"14"},{"size":1319,"mtime":1666336562039,"results":"23","hashOfConfig":"14"},{"size":2428,"mtime":1670058550723,"results":"24","hashOfConfig":"14"},{"size":4748,"mtime":1669887231859,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"1hs4tzq",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"D:\\projects\\test-game\\src\\index.ts",["68"],[],"import { b2_pi } from \"box2d.ts\";\r\nimport {\r\n  AssetManager,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  Game,\r\n} from \"gdxts\";\r\nimport { Constants } from \"./Constant\";\r\nimport { createGameScreen } from \"./GameScreen/GameScreen\";\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(\r\n    canvas,\r\n    Constants.WORLD_WIDTH,\r\n    Constants.WORLD_HEIGHT\r\n  );\r\n  const gl = viewport.getContext();\r\n\r\n  const assetManager = new AssetManager(gl);\r\n  await assetManager.loadTexture(\"./bloodBar.png\", \"bloodBar\");\r\n  await assetManager.loadTexture(\"./vsAsset.png\", \"vsAsset\");\r\n  await assetManager.loadTexture(\"./winningAsset.png\", \"winningAsset\");\r\n  await assetManager.loadTexture(\"./tempAsset.png\", \"paint\");\r\n\r\n  Game.shared.setScreen(await createGameScreen(assetManager, viewport));\r\n\r\n  createGameLoop((delta: number) => {\r\n    Game.shared.update(delta);\r\n  });\r\n};\r\ninit();\r\n","D:\\projects\\test-game\\src\\Constant.ts",[],[],"D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts",["69","70","71","72"],[],"import {\r\n  b2Body,\r\n  b2BodyType,\r\n  b2ContactListener,\r\n  b2DegToRad,\r\n  b2RevoluteJointDef,\r\n  b2Vec2,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  OrthoCamera,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Vector3,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { controlCameraGame, StateGame } from \"../dataGame/stateGame\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\r\nimport { ContactListenerSystem } from \"../System/ContactListener\";\r\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\r\nimport { NextLevelSystem } from \"../System/NextLevelSystem\";\r\nimport { TurnOfTeam } from \"../System/TurnOfTeam\";\r\nimport { createBall, createGround } from \"../System/utils\";\r\nimport { human, HumanPartType, HumanRig } from \"../System/CreateHuman\";\r\nimport { CameraGame } from \"../System/CameraGame\";\r\nconst stateGame: StateGame = {\r\n  currentLevel: 1,\r\n  WhoisTurning: 2,\r\n  CooldownTime: 0,\r\n  changeTurn: false,\r\n  conditionWin: false,\r\n  setupTeam1: false,\r\n  setupTeam2: false,\r\n  botDelayTime: 0,\r\n  delayTime: 0,\r\n};\r\nexport const physicWorld = new b2World({\r\n  x: 0,\r\n  y: -10,\r\n});\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  if (stateGame.currentLevel > 3) {\r\n    stateGame.currentLevel %= 3;\r\n  }\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n\r\n  const viewportInfo = viewport.getViewportInfo();\r\n  const cameraUI = new OrthoCamera(\r\n    Constants.WORLD_WIDTH,\r\n    Constants.WORLD_HEIGHT,\r\n    viewportInfo.worldWidth,\r\n    viewportInfo.worldHeight\r\n  );\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  batch.setYDown(true);\r\n\r\n  const world = new World();\r\n\r\n  const mapData = await fetch(`./level${stateGame.currentLevel}.tmj`).then(\r\n    (res) => res.json()\r\n  );\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  // const personTeam1Data = mapData.layers.find(\r\n  //   (p: any) => p.name === \"Team1\"\r\n  // ).objects;\r\n  // const personTeam2Data = mapData.layers.find(\r\n  //   (p: any) => p.name === \"Team2\"\r\n  // ).objects;\r\n\r\n  // const ball1 = mapData.layex    rs.find((b: any) => b.name === \"ball1\").objects;\r\n\r\n  let grounds: b2Body[] = [];\r\n  let Team1: HumanRig[] = [];\r\n  let Team2: HumanRig[] = [];\r\n  let ballsTeam1: b2Body[] = [];\r\n  let ballsTeam2: b2Body[] = [];\r\n  stateGame.WhoisTurning = 2;\r\n\r\n  for (let ground of groundData) {\r\n    grounds.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  let inputHandle = new ViewportInputHandler(viewport);\r\n  const contactListener = new b2ContactListener();\r\n\r\n  let originPosition = new Vector2(0, 0);\r\n  let dragPositioning = new Vector2(0, 0);\r\n\r\n  const cameraControl: controlCameraGame = {\r\n    introGame: true,\r\n    startCam1: false,\r\n    startCam2: true,\r\n  };\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"camera\", camera);\r\n  world.register(\"cameraUI\", cameraUI);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"inputHandle\", inputHandle);\r\n  world.register(\"groundData\", groundData);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"mapData\", mapData);\r\n  world.register(\"Team1\", Team1);\r\n  world.register(\"Team2\", Team2);\r\n  world.register(\"ballsTeam1\", ballsTeam1);\r\n  world.register(\"ballsTeam2\", ballsTeam2);\r\n  world.register(\"StateGame\", stateGame);\r\n  world.register(\"contactListener\", contactListener);\r\n\r\n  let tempX1 = 1;\r\n  let tempY1 = 6.5;\r\n  let tempX2 = 22.1;\r\n  let tempY2 = 10;\r\n\r\n  switch (stateGame.currentLevel) {\r\n    case 1:\r\n      for (let i = 0; i < 3; i++) {\r\n        tempX1 += 1;\r\n        tempY1 = 4.5;\r\n        Team1.push(human(physicWorld, tempX1, tempY1));\r\n      }\r\n      for (let i = 0; i < 3; i++) {\r\n        tempX1 += 1;\r\n        tempY1 = 3.5;\r\n        Team1.push(human(physicWorld, tempX1, tempY1));\r\n      }\r\n      for (let j = 0; j < 3; j++) {\r\n        tempX2 += 1;\r\n        tempY2 = 3.5;\r\n        Team2.push(human(physicWorld, tempX2, tempY2));\r\n      }\r\n      for (let j = 0; j < 3; j++) {\r\n        tempX2 += 1;\r\n        tempY2 = 4.5;\r\n        Team2.push(human(physicWorld, tempX2, tempY2));\r\n      }\r\n      break;\r\n    case 2:\r\n      tempX1 = 2.25;\r\n      tempY1 = 3.5;\r\n      tempX2 = 26.5;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        tempX1 += 0.5;\r\n        tempY1 = 3.5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team1\r\n            .push\r\n            // createPerson(\r\n            //   physicWorld,\r\n            //   tempX1,\r\n            //   tempY1++,\r\n            //   Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   { name: \"Person\" },\r\n            //   Constants.PERSONTEAM1_CATEGORY_BIT,\r\n            //   Constants.PERSONTEAM1_MASK_BIT\r\n            // )\r\n            ();\r\n        }\r\n        tempX2 -= 0.5;\r\n        tempY2 = 5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team2\r\n            .push\r\n            // createPerson(\r\n            //   physicWorld,\r\n            //   tempX2,\r\n            //   (tempY2 -= 0.5),\r\n            //   Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   { name: \"Person\" },\r\n            //   Constants.PERSONTEAM1_CATEGORY_BIT,\r\n            //   Constants.PERSONTEAM1_MASK_BIT\r\n            // )\r\n            ();\r\n        }\r\n      }\r\n      break;\r\n    case 3:\r\n      tempX1 = 2.25;\r\n      tempY1 = 3.5;\r\n      tempX2 = 26.5;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        tempX1 += 0.5;\r\n        tempY1 = 3.5;\r\n        for (let j = 0; j < 2; j++) {\r\n          // Team1.push(\r\n          //   createPerson(\r\n          //     physicWorld,\r\n          //     tempX1,\r\n          //     tempY1++,\r\n          //     Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n          //     Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n          //     { name: \"Person\" },\r\n          //     Constants.PERSONTEAM1_CATEGORY_BIT,\r\n          //     Constants.PERSONTEAM1_MASK_BIT\r\n          //   )\r\n          // );\r\n        }\r\n        tempX2 -= 0.5;\r\n        tempY2 = 5;\r\n        for (let j = 0; j < 3; j++) {\r\n          Team2\r\n            .push\r\n            // createPerson(\r\n            //   physicWorld,\r\n            //   tempX2,\r\n            //   (tempY2 -= 0.5),\r\n            //   Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n            //   { name: \"Person\" },\r\n            //   Constants.PERSONTEAM1_CATEGORY_BIT,\r\n            //   Constants.PERSONTEAM1_MASK_BIT\r\n            // )\r\n            ();\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const offsetX = 300;\r\n  cameraUI.setPosition(\r\n    Constants.WORLD_WIDTH + Constants.WORLD_WIDTH / 2 + offsetX,\r\n    Constants.WORLD_HEIGHT / 2\r\n  );\r\n\r\n  const tempVector3 = new Vector3();\r\n  let setCam2Vec = false;\r\n\r\n  world.addSystem(new PhysicDebugSystem(), true);\r\n  world.addSystem(new ContactListenerSystem(), true);\r\n  world.addSystem(new RenderSystem(), false);\r\n  world.addSystem(new CameraGame(), true);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(cameraUI.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n\r\n      cameraUI.update();\r\n\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      stateGame.CooldownTime -= delta;\r\n      if (stateGame.WhoisTurning === 2 && cameraControl.startCam1 === false) {\r\n        stateGame.botDelayTime += delta;\r\n        stateGame.delayTime += delta;\r\n      } else {\r\n        stateGame.botDelayTime = 0;\r\n      }\r\n\r\n      if (cameraControl.introGame) {\r\n        if (cameraControl.startCam2 === true) {\r\n          if (setCam2Vec === false) {\r\n            setTimeout(() => {\r\n              tempVector3.set(delta * 600, 0, 0);\r\n              setCam2Vec = true;\r\n            }, 1000);\r\n          }\r\n          camera.position.add(tempVector3);\r\n\r\n          if (\r\n            camera.position.x >=\r\n            Team2[3].parts[HumanPartType.Head].GetPosition().x *\r\n              Constants.METER_TO_PHYSIC_WORLD\r\n          ) {\r\n            cameraControl.startCam2 = false;\r\n            cameraControl.startCam1 = true;\r\n            tempVector3.set(0, 0, 0);\r\n          }\r\n        }\r\n\r\n        if (cameraControl.startCam1) {\r\n          setTimeout(() => {\r\n            tempVector3.set(-delta * 600, 0, 0);\r\n          }, 1000);\r\n          camera.position.add(tempVector3);\r\n\r\n          if (\r\n            camera.position.x <=\r\n            Team1[3].parts[HumanPartType.Head].GetPosition().x *\r\n              Constants.METER_TO_PHYSIC_WORLD\r\n          ) {\r\n            cameraControl.startCam1 = false;\r\n            tempVector3.set(0, 0, 0);\r\n            cameraControl.introGame = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (cameraControl.introGame === false) {\r\n        cameraControl.introGame = true;\r\n        if (Team1.length >= 6 && !stateGame.setupTeam1) {\r\n          stateGame.setupTeam1 = true;\r\n        }\r\n        if (Team2.length >= 6 && !stateGame.setupTeam2) {\r\n          stateGame.setupTeam2 = true;\r\n          // for (let i = Team2.length - 1; i >= 0; i--) {\r\n          //   for (let j = 0; j < Team2[i].parts.length; j++) {\r\n          //     setTimeout(() => {\r\n          //       Team2[i].parts[j].SetActive(false);\r\n          //     }, 500);\r\n          //   }\r\n          // }\r\n          setTimeout(() => {\r\n            for (let i = 0; i < Team2.length; i++) {\r\n              ballsTeam2.push(\r\n                createBall(\r\n                  physicWorld,\r\n                  Team2[i].parts[HumanPartType.Head].GetPosition().x + 0.2,\r\n                  Team2[i].parts[HumanPartType.Head].GetPosition().y + 0.2,\r\n                  0.075,\r\n                  Constants.BALLTEAM2_CATEGORY_BIT,\r\n                  Constants.BALLTEAM2_MASK_BIT\r\n                )\r\n              );\r\n            }\r\n            originPosition = new Vector2(\r\n              ballsTeam2[Math.floor(ballsTeam2.length / 2)].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD -\r\n                50,\r\n              ballsTeam2[Math.floor(ballsTeam2.length / 2)].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n                50\r\n            );\r\n\r\n            dragPositioning = new Vector2(\r\n              ballsTeam2[Math.floor(ballsTeam2.length / 2)].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD,\r\n              ballsTeam2[Math.floor(ballsTeam2.length / 2)].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n            // for (let i = 0; i < Team1.length; i++) {\r\n            //   for (let j = 0; j < Team1[i].parts.length; j++) {\r\n            //     Team1[i].parts[j].SetType(b2BodyType.b2_dynamicBody);\r\n            //   }\r\n            // }\r\n            // for (let i = 0; i < Team2.length; i++) {\r\n            //   for (let j = 0; j < Team2[i].parts.length; j++) {\r\n            //     Team2[i].parts[j].SetType(b2BodyType.b2_staticBody);\r\n            //   }\r\n            // }\r\n            world.register(\"originPosition\", originPosition);\r\n            world.register(\"dragPositioning\", dragPositioning);\r\n            world.addSystem(new InputHandlerSystem(), true);\r\n            world.addSystem(new TurnOfTeam(), true);\r\n            world.addSystem(new NextLevelSystem(), true);\r\n            camera.position.set(\r\n              ballsTeam2[Math.floor(ballsTeam2.length / 2)].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.WORLD_HEIGHT / 2,\r\n              0\r\n            );\r\n            camera.update();\r\n          }, 1500);\r\n        }\r\n      }\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts",[],[],"D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\utils.ts",[],[],"D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts",["73"],[],"import { b2Body, b2BodyType, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { OrthoCamera, Vector2 } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { HumanPartType, HumanRig } from \"./CreateHuman\";\r\nimport { createBall } from \"./utils\";\r\n\r\nexport class TurnOfTeam extends System {\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"ballsTeam2\") ballsTeam2: b2Body[];\r\n  @Inject(\"Team1\") Team1: HumanRig[];\r\n  @Inject(\"Team2\") Team2: HumanRig[];\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"mapData\") mapData: any;\r\n  @Inject(\"camera\") camera: OrthoCamera;\r\n\r\n  MAP_HEIGHT = 1000;\r\n  ball1: any;\r\n  ball2: any;\r\n\r\n  initialized() {\r\n    this.ball1 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball1\"\r\n    ).objects;\r\n    this.ball2 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball2\"\r\n    ).objects;\r\n  }\r\n\r\n  process(): void {\r\n    // if (this.Team1.length === 0 || this.Team2.length === 0 ) {\r\n    //   this.StateGame.conditionWin = true;\r\n    // }\r\n    if (\r\n      this.StateGame.CooldownTime < 0 &&\r\n      this.StateGame.changeTurn &&\r\n      this.StateGame.conditionWin === false\r\n    ) {\r\n      switch (this.StateGame.WhoisTurning) {\r\n        case 1:\r\n          this.StateGame.WhoisTurning = 2;\r\n          for (let i = this.ballsTeam1.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam1[i]);\r\n            this.ballsTeam1.splice(i, 1);\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < this.Team1[i].parts.length; j++) {\r\n              this.Team1[i].parts[j].SetActive(true);\r\n            }\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            for (let j = 0; j < this.Team2[i].parts.length; j++) {\r\n              this.Team2[i].parts[j].SetActive(false);\r\n            }\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            this.ballsTeam2.push(\r\n              createBall(\r\n                this.physicWorld,\r\n                this.Team2[i].parts[HumanPartType.Head].GetPosition().x + 0.2,\r\n                this.Team2[i].parts[HumanPartType.Head].GetPosition().y + 0.1,\r\n                0.075,\r\n                Constants.BALLTEAM2_CATEGORY_BIT,\r\n                Constants.BALLTEAM2_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          // this.camera.position.set(\r\n          //   this.ballsTeam2[\r\n          //     Math.floor(this.ballsTeam2.length / 2)\r\n          //   ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n          //   Constants.WORLD_HEIGHT / 2,\r\n          //   0\r\n          // );\r\n          this.camera.update();\r\n          this.StateGame.changeTurn = false;\r\n          if (this.StateGame.conditionWin === false) {\r\n            this.originPosition.set(\r\n              this.ballsTeam2[\r\n                Math.floor(this.ballsTeam2.length / 2)\r\n              ].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n                100,\r\n              this.ballsTeam2[\r\n                Math.floor(this.ballsTeam2.length / 2)\r\n              ].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n                100\r\n            );\r\n          }\r\n          break;\r\n        case 2:\r\n          for (let i = this.ballsTeam2.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam2[i]);\r\n            this.ballsTeam2.splice(i, 1);\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            for (let j = 0; j < this.Team2[i].parts.length; j++) {\r\n              this.Team2[i].parts[j].SetActive(true);\r\n            }\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < this.Team1[i].parts.length; j++) {\r\n              this.Team1[i].parts[j].SetActive(false);\r\n            }\r\n          }\r\n          this.StateGame.WhoisTurning = 1;\r\n          for (let i = 0; i < this.Team1.length; i++) {\r\n            this.ballsTeam1.push(\r\n              createBall(\r\n                this.physicWorld,\r\n                this.Team1[i].parts[HumanPartType.Head].GetPosition().x + 0.2,\r\n                this.Team1[i].parts[HumanPartType.Head].GetPosition().y + 0.1,\r\n                0.075,\r\n                Constants.BALLTEAM1_CATEGORY_BIT,\r\n                Constants.BALLTEAM1_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          // this.camera.position.set(\r\n          //   this.ballsTeam1[\r\n          //     Math.floor(this.ballsTeam1.length / 2)\r\n          //   ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n          //   Constants.WORLD_HEIGHT / 2,\r\n          //   0\r\n          // );\r\n          this.camera.update();\r\n\r\n          this.StateGame.changeTurn = false;\r\n          if (this.StateGame.conditionWin === false) {\r\n            this.originPosition.set(\r\n              this.ballsTeam1[\r\n                Math.floor(this.ballsTeam1.length / 2)\r\n              ].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n                100,\r\n              this.ballsTeam1[\r\n                Math.floor(this.ballsTeam1.length / 2)\r\n              ].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD +\r\n                100\r\n            );\r\n          }\r\n          // this.originPosition.set(\r\n          //   this.ballsTeam1[0].GetPosition().x *\r\n          //     Constants.METER_TO_PHYSIC_WORLD,\r\n          //   this.ballsTeam1[0].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n          // );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\ContactListener.ts",["74","75","76"],[],"import {\r\n  b2Body,\r\n  b2BodyType,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2JointDef,\r\n  b2JointType,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { HumanPartType, HumanRig } from \"./CreateHuman\";\r\n\r\nexport class ContactListenerSystem extends System {\r\n  @Inject(\"contactListener\") contactListener: b2ContactListener;\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"Team1\") Team1: HumanRig[];\r\n  @Inject(\"Team2\") Team2: HumanRig[];\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n\r\n  initialized() {\r\n    this.contactListener.BeginContact = function (contact: b2Contact) {\r\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\r\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\r\n      if (fixtureAData === fixtureBData) {\r\n      } else {\r\n        console.log(fixtureAData, fixtureBData);\r\n        if (fixtureBData === \"ball\" && fixtureAData.name !== \"Person\") {\r\n          contact.GetFixtureB().GetBody().m_activeFlag = false;\r\n        }\r\n      }\r\n      // if (fixtureBData.name) {\r\n\r\n      // }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      this.physicWorld.SetContactListener(this.contactListener);\r\n    }, 500);\r\n  }\r\n\r\n  process(): void {\r\n    for (let i = 0; i < this.Team1.length; i++) {\r\n      if (\r\n        this.Team1[i].parts[HumanPartType.Head].GetPosition().y <= 2.42 &&\r\n        this.Team1[i].parts[HumanPartType.Head].GetPosition().y <= 2.42\r\n      ) {\r\n        for (let j = this.Team1[i].parts.length - 1; j >= 0; j--) {\r\n          this.physicWorld.DestroyBody(this.Team1[i].parts[j]);\r\n          this.Team1[i].parts.splice(j, 1);\r\n        }\r\n        this.Team1.splice(i, 1);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.Team2.length; i++) {\r\n      if (\r\n        this.Team2[i].parts[HumanPartType.Head].GetPosition().y <= 2.42 &&\r\n        this.Team2[i].parts[HumanPartType.Head].GetPosition().y <= 2.42\r\n      ) {\r\n        for (let j = this.Team2[i].parts.length - 1; j >= 0; j--) {\r\n          this.physicWorld.DestroyBody(this.Team2[i].parts[j]);\r\n          this.Team2[i].parts.splice(j, 1);\r\n        }\r\n        this.Team2.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts",[],[],[],"D:\\projects\\test-game\\src\\System\\CameraGame.ts",[],[],"D:\\projects\\test-game\\src\\System\\CreateHuman.ts",["77","78"],[],"import {\r\n  b2Body,\r\n  b2BodyType,\r\n  b2DegToRad,\r\n  b2RevoluteJointDef,\r\n  b2Vec2,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { parseJsonText } from \"typescript\";\r\nimport { physicWorld } from \"../GameScreen/GameScreen\";\r\nimport {\r\n  head,\r\n  leftArm,\r\n  lowerLeftLeg,\r\n  lowerRightLeg,\r\n  rightArm,\r\n  torso1,\r\n  torso2,\r\n  torso3,\r\n  upperLeftLeg,\r\n  upperRightLeg,\r\n} from \"./utils\";\r\n\r\nexport enum HumanPartType {\r\n  Head = 0,\r\n  Torso1,\r\n  Torso2,\r\n  Torso3,\r\n  leftArm,\r\n  rightArm,\r\n  upperLeftLeg,\r\n  upperRightLeg,\r\n  lowerLeftLeg,\r\n  lowerRightLeg,\r\n}\r\nexport interface HumanRig {\r\n  parts: b2Body[];\r\n}\r\n\r\nexport function human(\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n): HumanRig {\r\n  const humanRig: HumanRig = {\r\n    parts: [],\r\n  };\r\n  humanRig.parts.push(head(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso1(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso2(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso3(physicWorld, startX, startY));\r\n  humanRig.parts.push(leftArm(physicWorld, startX, startY));\r\n  humanRig.parts.push(rightArm(physicWorld, startX, startY));\r\n  humanRig.parts.push(upperLeftLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(upperRightLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(lowerLeftLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(lowerRightLeg(physicWorld, startX, startY));\r\n\r\n  const jd = new b2RevoluteJointDef();\r\n  // Head to shoulders\r\n  jd.lowerAngle = b2DegToRad(0);\r\n  jd.upperAngle = b2DegToRad(0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.Head],\r\n    new b2Vec2(startX, startY - 1.5 / 10)\r\n  );\r\n  jd.enableLimit = true;\r\n  physicWorld.CreateJoint(jd);\r\n\r\n  // Upper arm to shoulders\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-85.0);\r\n  jd.upperAngle = b2DegToRad(130.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.leftArm],\r\n    new b2Vec2(startX - 1.8 / 10, startY - 2.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-130.0);\r\n  jd.upperAngle = b2DegToRad(85.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.rightArm],\r\n    new b2Vec2(startX + 1.8 / 10, startY - 2.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Lower arm to upper arm\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-130.0);\r\n  jd.upperAngle = b2DegToRad(10.0);\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-10.0);\r\n  jd.upperAngle = b2DegToRad(130.0);\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Shoulders/stomach\r\n  jd.lowerAngle = b2DegToRad(-15.0);\r\n  jd.upperAngle = b2DegToRad(15.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.Torso2],\r\n    new b2Vec2(startX, startY - 3.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  // Stomach/hips\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso2],\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    new b2Vec2(startX, startY - 5.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Torso to upper leg\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-25.0);\r\n  jd.upperAngle = b2DegToRad(45.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    humanRig.parts[HumanPartType.upperLeftLeg],\r\n    new b2Vec2(startX - 0.8 / 10, startY - 7.2 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-45.0);\r\n  jd.upperAngle = b2DegToRad(25.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    humanRig.parts[HumanPartType.upperRightLeg],\r\n    new b2Vec2(startX + 0.8 / 10, startY - 7.2 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Upper leg to lower leg\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(0);\r\n  jd.upperAngle = b2DegToRad(0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.upperLeftLeg],\r\n    humanRig.parts[HumanPartType.lowerLeftLeg],\r\n    new b2Vec2(startX - 0.8 / 10, startY - 10.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-115.0);\r\n  jd.upperAngle = b2DegToRad(25);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.upperRightLeg],\r\n    humanRig.parts[HumanPartType.lowerRightLeg],\r\n    new b2Vec2(startX + 0.8 / 10, startY - 10.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n  for (let i = 0; i < humanRig.parts.length; i++) {\r\n    humanRig.parts[i].SetType(b2BodyType.b2_dynamicBody);\r\n  }\r\n\r\n  // humanRig.parts[0].SetType(b2BodyType.b2_staticBody);\r\n\r\n  return humanRig;\r\n}\r\n",{"ruleId":"79","severity":1,"message":"80","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":15},{"ruleId":"79","severity":1,"message":"83","line":3,"column":3,"nodeType":"81","messageId":"82","endLine":3,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":5,"column":3,"nodeType":"81","messageId":"82","endLine":5,"endColumn":13},{"ruleId":"79","severity":1,"message":"85","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":21},{"ruleId":"79","severity":1,"message":"86","line":7,"column":3,"nodeType":"81","messageId":"82","endLine":7,"endColumn":9},{"ruleId":"79","severity":1,"message":"83","line":1,"column":18,"nodeType":"81","messageId":"82","endLine":1,"endColumn":28},{"ruleId":"79","severity":1,"message":"83","line":3,"column":3,"nodeType":"81","messageId":"82","endLine":3,"endColumn":13},{"ruleId":"79","severity":1,"message":"87","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"79","severity":1,"message":"88","line":7,"column":3,"nodeType":"81","messageId":"82","endLine":7,"endColumn":14},{"ruleId":"79","severity":1,"message":"89","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":23},{"ruleId":"79","severity":1,"message":"90","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":21},"@typescript-eslint/no-unused-vars","'b2_pi' is defined but never used.","Identifier","unusedVar","'b2BodyType' is defined but never used.","'b2DegToRad' is defined but never used.","'b2RevoluteJointDef' is defined but never used.","'b2Vec2' is defined but never used.","'b2JointDef' is defined but never used.","'b2JointType' is defined but never used.","'parseJsonText' is defined but never used.","'physicWorld' is defined but never used."]