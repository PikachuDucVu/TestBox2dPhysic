[{"D:\\projects\\test-game\\src\\index.ts":"1","D:\\projects\\test-game\\src\\Constant.ts":"2","D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts":"3","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts":"4","D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts":"5","D:\\projects\\test-game\\src\\System\\utils.ts":"6","D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts":"7","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts":"8","D:\\projects\\test-game\\src\\System\\ContactListener.ts":"9"},{"size":879,"mtime":1665393448746,"results":"10","hashOfConfig":"11"},{"size":269,"mtime":1664853219982,"results":"12","hashOfConfig":"11"},{"size":5253,"mtime":1665463506241,"results":"13","hashOfConfig":"11"},{"size":2884,"mtime":1665392831438,"results":"14","hashOfConfig":"11"},{"size":2021,"mtime":1665393964172,"results":"15","hashOfConfig":"11"},{"size":1767,"mtime":1665392122246,"results":"16","hashOfConfig":"11"},{"size":4654,"mtime":1665475886635,"results":"17","hashOfConfig":"11"},{"size":3194,"mtime":1665461553518,"results":"18","hashOfConfig":"11"},{"size":1909,"mtime":1665476100491,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wyhpi",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\test-game\\src\\index.ts",[],[],"D:\\projects\\test-game\\src\\Constant.ts",[],[],"D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts",[],[],"D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts",["51","52","53"],[],"import {\r\n  b2Body,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2PolygonShape,\r\n  b2ShapeType,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport { Color, ShapeRenderer, Vector2 } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\n\r\nexport class PhysicDebugSystem extends System {\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"shapeRenderer\") shapeRenderer: ShapeRenderer;\r\n\r\n  tmpVector2 = new Vector2(0, 0);\r\n  vertices: number[] = [];\r\n  debugColors: Map<b2BodyType, Color> = new Map<b2BodyType, Color>();\r\n  initialized() {\r\n    this.debugColors.set(b2BodyType.b2_dynamicBody, Color.MAGENTA);\r\n    this.debugColors.set(b2BodyType.b2_kinematicBody, Color.GREEN);\r\n    this.debugColors.set(b2BodyType.b2_staticBody, Color.GREEN);\r\n    this.debugColors.set(b2BodyType.b2_unknown, Color.WHITE);\r\n  }\r\n  process(): void {\r\n    this.shapeRenderer.begin();\r\n    let body = this.physicWorld.GetBodyList();\r\n    while (body) {\r\n      const fixture = body.GetFixtureList();\r\n      const bodyType = body.GetType();\r\n      const position = body.GetPosition();\r\n      if (fixture) {\r\n        const type = fixture.GetType();\r\n        if (type === b2ShapeType.e_circleShape) {\r\n          const data = fixture.GetShape() as b2CircleShape;\r\n          this.shapeRenderer.circle(\r\n            false,\r\n            position.x * Constants.METER_TO_PHYSIC_WORLD,\r\n            position.y * Constants.METER_TO_PHYSIC_WORLD,\r\n            data.m_radius * Constants.METER_TO_PHYSIC_WORLD,\r\n            this.debugColors.get(bodyType)\r\n          );\r\n        }\r\n        if (type === b2ShapeType.e_polygonShape) {\r\n          const data = fixture.GetShape() as b2PolygonShape;\r\n          this.vertices.length = 0;\r\n\r\n          for (let i = 0; i < data.m_vertices.length; i++) {\r\n            // this.tmpVector2\r\n            //   .set(data.m_vertices[i].x, data.m_vertices[i].y)\r\n            //   .rotate(angle)\r\n            //   .add(position.x, position.y)\r\n            //   .scale(Constants.METER_TO_PHYSIC_WORLD);\r\n            // this.vertices.push(this.tmpVector2.x, this.tmpVector2.y);\r\n\r\n            this.vertices.push(\r\n              (data.m_vertices[i].x + position.x) *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n            this.vertices.push(\r\n              (data.m_vertices[i].y + position.y) *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          this.vertices.push(this.vertices[this.vertices.length - 2]);\r\n          this.vertices.push(this.vertices[1]);\r\n\r\n          this.shapeRenderer.polygon(\r\n            this.vertices,\r\n            0,\r\n            this.vertices.length,\r\n            this.debugColors.get(bodyType)\r\n          );\r\n        }\r\n      }\r\n      body = body.GetNext();\r\n    }\r\n\r\n    this.shapeRenderer.end();\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts",["54","55"],[],"import { b2Body } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Color,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\n\r\nexport class RenderSystem extends System {\r\n  @Inject(\"shapeRenderer\") shapeRenderer: ShapeRenderer;\r\n  @Inject(\"Team1\") Team1: b2Body[];\r\n  @Inject(\"Team2\") Team2: b2Body[];\r\n  @Inject(\"groundData\") groundData: any;\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"dragPositioning\") dragPositioning: Vector2;\r\n  @Inject(\"batch\") batch: PolygonBatch;\r\n  @Inject(\"assetManager\") assetManager: AssetManager;\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n\r\n  bloodBar: any;\r\n  vsAsset: any;\r\n  winningAsset: any;\r\n\r\n  initialized() {\r\n    this.bloodBar = this.assetManager.getTexture(\"bloodBar\") as Texture;\r\n    this.vsAsset = this.assetManager.getTexture(\"vsAsset\") as Texture;\r\n    this.winningAsset = this.assetManager.getTexture(\"winningAsset\") as Texture;\r\n  }\r\n\r\n  process(): void {\r\n    this.shapeRenderer.begin();\r\n    this.shapeRenderer.rect(\r\n      true,\r\n      this.dragPositioning.x,\r\n      this.dragPositioning.y,\r\n      30,\r\n      30\r\n    );\r\n\r\n    this.shapeRenderer.end();\r\n    this.batch.setYDown(false);\r\n    this.batch.begin();\r\n    this.batch.draw(\r\n      this.bloodBar,\r\n      1400,\r\n      1300,\r\n      100 * this.Team1.length,\r\n      100,\r\n      1,\r\n      1,\r\n      3.14\r\n    );\r\n    this.batch.draw(this.bloodBar, 1500, 1200, 100 * this.Team2.length, 100);\r\n    this.batch.draw(this.vsAsset, 1400, 1200, 100, 100, 50, 50);\r\n\r\n    if (this.Team1.length === 0 && this.StateGame.CooldownTime <= 0) {\r\n      this.batch.draw(this.winningAsset, 1750, 300, 1000, 1000);\r\n    }\r\n    if (this.Team2.length === 0 && this.StateGame.CooldownTime <= 0) {\r\n      this.batch.draw(this.winningAsset, 250, 300, 1000, 1000);\r\n    }\r\n    this.batch.end();\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\utils.ts",["56"],[],"import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2Transform,\r\n  b2World,\r\n} from \"box2d.ts\";\r\n\r\nexport const createGround = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nexport const createBall = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"ball\");\r\n  return body;\r\n};\r\n\r\nexport const createPerson = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: { name: \"Person\" }\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n","D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts",["57","58"],[],"import { b2Body, b2BodyType, b2Vec2 } from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport {\r\n  Color,\r\n  InputEvent,\r\n  OrthoCamera,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\n\r\nconst MAX_IMPULSE_POWER = 20;\r\nconst MAX_DRAGGING_RANGE = 1;\r\n\r\nconst tmpV = new Vector2(0, 0);\r\nconst tmpP = new Vector2(0, 0);\r\nconst tmpG = new Vector2(0, 0);\r\nconst GRAVITY = -10;\r\n\r\nfunction getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nconst getTrajectoryPoint = (\r\n  startPos: Vector2,\r\n  startV: Vector2,\r\n  n: number\r\n): Vector2 => {\r\n  const t = 10 / 60;\r\n  tmpV.setVector(startV).scale(t).scale(n).scale(-GRAVITY);\r\n  tmpG\r\n    .set(0, GRAVITY)\r\n    .scale(t * t)\r\n    .scale(0.5 * (n * n + n));\r\n  tmpP.setVector(startPos);\r\n  return tmpP.addVector(tmpV).addVector(tmpG);\r\n};\r\nconst tmpV2 = new Vector2(0, 0);\r\nconst trajectories: number[] = [];\r\nconst calculateImpulse = (\r\n  originPosition: Vector2,\r\n  dragPositioning: Vector2\r\n) => {\r\n  tmpV2\r\n    .set(\r\n      originPosition.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      originPosition.y / Constants.METER_TO_PHYSIC_WORLD\r\n    )\r\n    .sub(\r\n      dragPositioning.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      dragPositioning.y / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  if (tmpV2.len2() >= MAX_DRAGGING_RANGE * MAX_DRAGGING_RANGE) {\r\n    tmpV2.nor().scale(MAX_DRAGGING_RANGE);\r\n  }\r\n  tmpV2.scale(1 / MAX_DRAGGING_RANGE).scale(MAX_IMPULSE_POWER);\r\n  return tmpV2;\r\n};\r\n\r\nexport class InputHandlerSystem extends System {\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"ballsTeam2\") ballsTeam2: b2Body[];\r\n  @Inject(\"inputHandle\") inputHandle: ViewportInputHandler;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"dragPositioning\") dragPositioning: Vector2;\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n  @Inject(\"shapeRenderer\") shapeRenderer: ShapeRenderer;\r\n  @Inject(\"camera\") camera: OrthoCamera;\r\n\r\n  hasFired = false;\r\n  dragging = false;\r\n\r\n  initialized() {\r\n    this.inputHandle.addEventListener(InputEvent.TouchStart, () => {});\r\n  }\r\n\r\n  process(): void {\r\n    if (this.StateGame.CooldownTime < 0) {\r\n      this.hasFired = false;\r\n    }\r\n    this.dragPositioning = this.inputHandle.getTouchedWorldCoord();\r\n    if (this.inputHandle.isTouched()) {\r\n      if (!this.dragging) {\r\n        this.dragging = true;\r\n      }\r\n    } else {\r\n      if (this.dragging) {\r\n        const impulse = calculateImpulse(\r\n          this.originPosition,\r\n          this.dragPositioning\r\n        );\r\n        if (this.StateGame.WhoisTurning === 1 && this.hasFired === false) {\r\n          for (let ball of this.ballsTeam1) {\r\n            ball.SetType(b2BodyType.b2_dynamicBody);\r\n            ball.ApplyLinearImpulseToCenter(impulse);\r\n          }\r\n        }\r\n        if (this.StateGame.WhoisTurning === 2 && this.hasFired === false) {\r\n          for (let ball of this.ballsTeam2) {\r\n            ball.SetType(b2BodyType.b2_dynamicBody);\r\n            ball.ApplyLinearImpulseToCenter(impulse);\r\n          }\r\n        }\r\n        this.hasFired = true;\r\n        this.StateGame.CooldownTime = 5;\r\n        setTimeout(() => {\r\n          this.StateGame.changeTurn = true;\r\n        }, 5000);\r\n        this.dragging = false;\r\n      }\r\n    }\r\n    this.shapeRenderer.begin();\r\n\r\n    if (this.dragging) {\r\n      tmpV2\r\n        .set(this.originPosition.x, this.originPosition.y)\r\n        .sub(this.dragPositioning.x, this.dragPositioning.y);\r\n      if (tmpV2.len2() <= MAX_DRAGGING_RANGE * MAX_DRAGGING_RANGE) {\r\n        tmpV2.nor().scale(-MAX_DRAGGING_RANGE);\r\n        tmpV2.add(this.originPosition.x, this.originPosition.y);\r\n      } else {\r\n        tmpV2.setVector(this.dragPositioning);\r\n      }\r\n      console.log(this.dragPositioning);\r\n      this.shapeRenderer.rectLine(\r\n        true,\r\n        this.originPosition.x,\r\n        this.originPosition.y,\r\n        tmpV2.x,\r\n        tmpV2.y,\r\n        10\r\n      );\r\n\r\n      trajectories.length = 0;\r\n      const impulse = calculateImpulse(\r\n        this.originPosition,\r\n        this.dragPositioning\r\n      );\r\n      for (let i = 0; i < 180; i++) {\r\n        const pos = getTrajectoryPoint(this.originPosition, impulse, i);\r\n        trajectories.push(pos.x, pos.y);\r\n      }\r\n      for (let i = 0; i < trajectories.length; i += 2) {\r\n        this.shapeRenderer.circle(\r\n          true,\r\n          trajectories[i],\r\n          trajectories[i + 1],\r\n          5,\r\n          Color.BLUE,\r\n          10\r\n        );\r\n      }\r\n    }\r\n    this.shapeRenderer.end();\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts",[],[],"D:\\projects\\test-game\\src\\System\\ContactListener.ts",[],[],{"ruleId":"59","severity":1,"message":"60","line":2,"column":3,"nodeType":"61","messageId":"62","endLine":2,"endColumn":9},{"ruleId":"59","severity":1,"message":"63","line":8,"column":3,"nodeType":"61","messageId":"62","endLine":8,"endColumn":8},{"ruleId":"59","severity":1,"message":"64","line":13,"column":10,"nodeType":"61","messageId":"62","endLine":13,"endColumn":19},{"ruleId":"59","severity":1,"message":"65","line":5,"column":3,"nodeType":"61","messageId":"62","endLine":5,"endColumn":8},{"ruleId":"59","severity":1,"message":"66","line":11,"column":10,"nodeType":"61","messageId":"62","endLine":11,"endColumn":19},{"ruleId":"59","severity":1,"message":"67","line":8,"column":3,"nodeType":"61","messageId":"62","endLine":8,"endColumn":14},{"ruleId":"59","severity":1,"message":"68","line":1,"column":30,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"69","line":22,"column":10,"nodeType":"61","messageId":"62","endLine":22,"endColumn":22},"@typescript-eslint/no-unused-vars","'b2Body' is defined but never used.","Identifier","unusedVar","'b2_pi' is defined but never used.","'StateGame' is defined but never used.","'Color' is defined but never used.","'Constants' is defined but never used.","'b2Transform' is defined but never used.","'b2Vec2' is defined but never used.","'getRandomInt' is defined but never used."]