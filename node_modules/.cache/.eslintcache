[{"D:\\projects\\test-game\\src\\index.ts":"1","D:\\projects\\test-game\\src\\Constant.ts":"2","D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts":"3","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts":"4","D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts":"5","D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts":"6","D:\\projects\\test-game\\src\\System\\utils.ts":"7","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts":"8","D:\\projects\\test-game\\src\\System\\ContactListener.ts":"9","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts":"10"},{"size":944,"mtime":1666090584391,"results":"11","hashOfConfig":"12"},{"size":1345,"mtime":1666344317812,"results":"13","hashOfConfig":"12"},{"size":11212,"mtime":1666344507900,"results":"14","hashOfConfig":"12"},{"size":4190,"mtime":1666343704258,"results":"15","hashOfConfig":"12"},{"size":2209,"mtime":1666091893569,"results":"16","hashOfConfig":"12"},{"size":5493,"mtime":1666344994953,"results":"17","hashOfConfig":"12"},{"size":2793,"mtime":1666344536320,"results":"18","hashOfConfig":"12"},{"size":4323,"mtime":1666344958602,"results":"19","hashOfConfig":"12"},{"size":2049,"mtime":1666344223465,"results":"20","hashOfConfig":"12"},{"size":1319,"mtime":1666336562039,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1hs4tzq",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\test-game\\src\\index.ts",[],[],[],"D:\\projects\\test-game\\src\\Constant.ts",[],[],"D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts",["58","59","60","61"],[],"import { b2Body, b2BodyType, b2ContactListener, b2World } from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { PhysicDebugSystem } from \"../RenderSystem/physicDebugSystem\";\r\nimport { RenderSystem } from \"../RenderSystem/RenderSystem\";\r\nimport { ContactListenerSystem } from \"../System/ContactListener\";\r\nimport { InputHandlerSystem } from \"../System/inputHandlerSystem\";\r\nimport { NextLevelSystem } from \"../System/NextLevelSystem\";\r\nimport { TurnOfTeam } from \"../System/TurnOfTeam\";\r\nimport {\r\n  createArray,\r\n  createBall,\r\n  createGround,\r\n  createPerson,\r\n} from \"../System/utils\";\r\n\r\nconst stateGame: StateGame = {\r\n  currentLevel: 1,\r\n  WhoisTurning: 1,\r\n  CooldownTime: 999,\r\n  changeTurn: false,\r\n  conditionWin: false,\r\n  setupTeam1: false,\r\n  setupTeam2: false,\r\n};\r\n\r\nconst MAP_HEIGHT = 1000; // map height\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  if (stateGame.currentLevel > 3) {\r\n    stateGame.currentLevel %= 3;\r\n  }\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  gl.clearColor(0, 0, 0, 1);\r\n  batch.setYDown(true);\r\n\r\n  const world = new World();\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  const mapData = await fetch(`./level${stateGame.currentLevel}.tmj`).then(\r\n    (res) => res.json()\r\n  );\r\n  const groundData = mapData.layers.find(\r\n    (w: any) => w.name === \"Ground\"\r\n  ).objects;\r\n  // const personTeam1Data = mapData.layers.find(\r\n  //   (p: any) => p.name === \"Team1\"\r\n  // ).objects;\r\n  // const personTeam2Data = mapData.layers.find(\r\n  //   (p: any) => p.name === \"Team2\"\r\n  // ).objects;\r\n\r\n  // const ball1 = mapData.layex    rs.find((b: any) => b.name === \"ball1\").objects;\r\n\r\n  let grounds: b2Body[] = [];\r\n  let Team1: b2Body[] = [];\r\n  let Team2: b2Body[] = [];\r\n  let ballsTeam1: b2Body[] = [];\r\n  let ballsTeam2: b2Body[] = [];\r\n\r\n  for (let ground of groundData) {\r\n    grounds.push(\r\n      createGround(\r\n        physicWorld,\r\n        ground.x / Constants.METER_TO_PHYSIC_WORLD,\r\n        (MAP_HEIGHT - ground.y) / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.width / Constants.METER_TO_PHYSIC_WORLD,\r\n        ground.height / Constants.METER_TO_PHYSIC_WORLD\r\n      )\r\n    );\r\n  }\r\n  let inputHandle = new ViewportInputHandler(viewport);\r\n  const contactListener = new b2ContactListener();\r\n\r\n  let touchTemp = new Vector2(0, 0);\r\n  let originPosition = new Vector2(0, 0);\r\n  let dragPositioning = new Vector2(0, 0);\r\n\r\n  world.register(\"gl\", gl);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"camera\", camera);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"inputHandle\", inputHandle);\r\n  world.register(\"groundData\", groundData);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"mapData\", mapData);\r\n  world.register(\"Team1\", Team1);\r\n  world.register(\"Team2\", Team2);\r\n  world.register(\"ballsTeam1\", ballsTeam1);\r\n  world.register(\"ballsTeam2\", ballsTeam2);\r\n\r\n  world.register(\"StateGame\", stateGame);\r\n  world.register(\"contactListener\", contactListener);\r\n\r\n  world.addSystem(new PhysicDebugSystem(), true);\r\n  world.addSystem(new ContactListenerSystem(), true);\r\n  world.addSystem(new RenderSystem(), false);\r\n  let tempX1 = 1;\r\n  let tempY1 = 3.5;\r\n  let tempX2 = 27.25;\r\n  let tempY2 = 10;\r\n\r\n  // Team1.push(\r\n  //   createPerson(\r\n  //     physicWorld,\r\n  //     tempX1,\r\n  //     tempY1,\r\n  //     Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n  //     Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n  //     { name: \"Person\" },\r\n  //     Constants.PERSONTEAM1_CATEGORY_BIT,\r\n  //     Constants.PERSONTEAM1_MASK_BIT\r\n  //   )\r\n  // );\r\n  switch (stateGame.currentLevel) {\r\n    case 1:\r\n      for (let i = 0; i < 4; i++) {\r\n        tempX1++;\r\n        tempY1 = 3.5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team1.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX1,\r\n              tempY1++,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n        tempX2--;\r\n        tempY2 = 5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team2.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX2,\r\n              tempY2--,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n      }\r\n      break;\r\n    case 2:\r\n      tempX1 = 2.25;\r\n      tempY1 = 3.5;\r\n      tempX2 = 26.5;\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        tempX1++;\r\n        tempY1 = 3.5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team1.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX1,\r\n              tempY1++,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n        tempX2--;\r\n        tempY2 = 5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team2.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX2,\r\n              tempY2--,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n      }\r\n      break;\r\n    case 3:\r\n      tempX1 = 2.25;\r\n      tempY1 = 3.5;\r\n      tempX2 = 26.5;\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        tempX1++;\r\n        tempY1 = 3.5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team1.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX1,\r\n              tempY1++,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n        tempX2--;\r\n        tempY2 = 5;\r\n        for (let j = 0; j < 2; j++) {\r\n          Team2.push(\r\n            createPerson(\r\n              physicWorld,\r\n              tempX2,\r\n              tempY2--,\r\n              Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n              Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n              { name: \"Person\" },\r\n              Constants.PERSONTEAM1_CATEGORY_BIT,\r\n              Constants.PERSONTEAM1_MASK_BIT\r\n            )\r\n          );\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // inputHandle.addEventListener(InputEvent.TouchStart, () => {\r\n  //   touchTemp.setVector(inputHandle.getTouchedWorldCoord());\r\n  //   if (Team1.length < 8 && stateGame.setupTeam1 === false) {\r\n  //     Team1.push(\r\n  //       createPerson(\r\n  //         physicWorld,\r\n  //         touchTemp.x / Constants.METER_TO_PHYSIC_WORLD - 0.5,\r\n  //         touchTemp.y / Constants.METER_TO_PHYSIC_WORLD - 0.5,\r\n  //         Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n  //         Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n  //         { name: \"Person\" },\r\n  //         Constants.PERSONTEAM1_CATEGORY_BIT,\r\n  //         Constants.PERSONTEAM1_MASK_BIT\r\n  //       )\r\n  //     );\r\n  //   }\r\n  // if (\r\n  //   Team2.length < 8 &&\r\n  //   stateGame.setupTeam1 === true &&\r\n  //   stateGame.setupTeam2 === false &&\r\n  //   touchTemp.getX() > Constants.WORLD_WIDTH / 2\r\n  // ) {\r\n  //   Team2.push(\r\n  //     createPerson(\r\n  //       physicWorld,\r\n  //       touchTemp.x / Constants.METER_TO_PHYSIC_WORLD - 0.5,\r\n  //       touchTemp.y / Constants.METER_TO_PHYSIC_WORLD - 0.5,\r\n  //       Constants.PERSON_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       Constants.PERSON_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n  //       { name: \"Person\" },\r\n  //       Constants.PERSONTEAM1_CATEGORY_BIT,\r\n  //       Constants.PERSONTEAM1_MASK_BIT\r\n  //     )\r\n  //   );\r\n  // }\r\n  // });\r\n\r\n  return {\r\n    update(delta: number) {\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n      stateGame.CooldownTime -= delta;\r\n\r\n      if (Team1.length === 8 && !stateGame.setupTeam1) {\r\n        stateGame.setupTeam1 = true;\r\n      }\r\n      if (Team2.length === 8 && !stateGame.setupTeam2) {\r\n        stateGame.setupTeam2 = true;\r\n        for (let i = Team1.length - 1; i >= 0; i--) {\r\n          setTimeout(() => {\r\n            Team1[i].SetActive(false);\r\n          }, 1000);\r\n        }\r\n        setTimeout(() => {\r\n          for (let i = 0; i < Team1.length; i++) {\r\n            ballsTeam1.push(\r\n              createArray(\r\n                physicWorld,\r\n                Team1[i].GetPosition().x + 0.2,\r\n                Team1[i].GetPosition().y + 0.2,\r\n                Constants.ARRAY_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n                Constants.ARRAY_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n                -15,\r\n                Constants.BALLTEAM1_CATEGORY_BIT,\r\n                Constants.BALLTEAM1_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          originPosition = new Vector2(\r\n            ballsTeam1[0].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n            ballsTeam1[0].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n          );\r\n\r\n          dragPositioning = new Vector2(\r\n            ballsTeam1[0].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n            ballsTeam1[0].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n          );\r\n          world.register(\"originPosition\", originPosition);\r\n          world.register(\"dragPositioning\", dragPositioning);\r\n          world.addSystem(new InputHandlerSystem(), true);\r\n          world.addSystem(new TurnOfTeam(), true);\r\n          world.addSystem(new NextLevelSystem(), true);\r\n        }, 1500);\r\n      }\r\n    },\r\n    dispose(): void {},\r\n  };\r\n};\r\n","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts",[],[],"D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts",["62"],[],"import { b2Body, b2BodyType } from \"box2d.ts\";\r\nimport { Inject, System } from \"flat-ecs\";\r\nimport { stat } from \"fs\";\r\nimport {\r\n  Color,\r\n  InputEvent,\r\n  OrthoCamera,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\n\r\nconst MAX_IMPULSE_POWER = 20;\r\nconst MAX_DRAGGING_RANGE = 1;\r\n\r\nconst tmpV = new Vector2(0, 0);\r\nconst tmpP = new Vector2(0, 0);\r\nconst tmpG = new Vector2(0, 0);\r\nconst GRAVITY = -10;\r\n\r\n// function getRandomInt(min: number, max: number) {\r\n//   return Math.floor(Math.random() * (max - min)) + min;\r\n// }\r\nconst getTrajectoryPoint = (\r\n  startPos: Vector2,\r\n  startV: Vector2,\r\n  n: number\r\n): Vector2 => {\r\n  const t = 10 / 60;\r\n  tmpV.setVector(startV).scale(t).scale(n).scale(-GRAVITY);\r\n  tmpG\r\n    .set(0, GRAVITY)\r\n    .scale(t * t)\r\n    .scale(0.5 * (n * n + n));\r\n  tmpP.setVector(startPos);\r\n  return tmpP.addVector(tmpV).addVector(tmpG);\r\n};\r\nconst tmpV2 = new Vector2(0, 0);\r\nconst trajectories: number[] = [];\r\nconst calculateImpulse = (\r\n  originPosition: Vector2,\r\n  dragPositioning: Vector2\r\n) => {\r\n  tmpV2\r\n    .set(\r\n      originPosition.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      originPosition.y / Constants.METER_TO_PHYSIC_WORLD\r\n    )\r\n    .sub(\r\n      dragPositioning.x / Constants.METER_TO_PHYSIC_WORLD,\r\n      dragPositioning.y / Constants.METER_TO_PHYSIC_WORLD\r\n    );\r\n  if (tmpV2.len2() >= MAX_DRAGGING_RANGE * MAX_DRAGGING_RANGE) {\r\n    tmpV2.nor().scale(MAX_DRAGGING_RANGE);\r\n  }\r\n  tmpV2.scale(1 / MAX_DRAGGING_RANGE).scale(MAX_IMPULSE_POWER);\r\n  return tmpV2;\r\n};\r\n\r\nexport class InputHandlerSystem extends System {\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"ballsTeam2\") ballsTeam2: b2Body[];\r\n  @Inject(\"inputHandle\") inputHandle: ViewportInputHandler;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"dragPositioning\") dragPositioning: Vector2;\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n  @Inject(\"shapeRenderer\") shapeRenderer: ShapeRenderer;\r\n  @Inject(\"camera\") camera: OrthoCamera;\r\n\r\n  hasFired = false;\r\n  dragging = false;\r\n  angle = 0;\r\n\r\n  initialized() {\r\n    this.inputHandle.addEventListener(InputEvent.TouchStart, () => {});\r\n  }\r\n\r\n  process(): void {\r\n    if (this.StateGame.CooldownTime < 0) {\r\n      this.hasFired = false;\r\n    }\r\n    if (this.hasFired) {\r\n      if (this.StateGame.WhoisTurning === 1) {\r\n        for (let i = 0; i < this.ballsTeam1.length; i++) {\r\n          this.angle = this.ballsTeam1[i].GetAngle();\r\n          if (this.angle > -135) {\r\n            this.ballsTeam1[i].SetAngle((this.angle -= 0.65));\r\n          }\r\n        }\r\n      }\r\n      if (this.StateGame.WhoisTurning === 2) {\r\n        for (let i = 0; i < this.ballsTeam2.length; i++) {\r\n          this.angle = this.ballsTeam2[i].GetAngle();\r\n          if (this.angle < 135) {\r\n            this.ballsTeam2[i].SetAngle((this.angle += 0.65));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.dragPositioning = this.inputHandle.getTouchedWorldCoord();\r\n    if (this.inputHandle.isTouched() && this.StateGame.conditionWin === false) {\r\n      if (!this.dragging) {\r\n        this.dragging = true;\r\n      }\r\n    } else {\r\n      if (this.dragging && this.hasFired === false) {\r\n        const impulse = calculateImpulse(\r\n          this.originPosition,\r\n          this.dragPositioning\r\n        );\r\n        if (this.StateGame.WhoisTurning === 1 && this.hasFired === false) {\r\n          this.StateGame.CooldownTime = 6;\r\n          this.dragging = false;\r\n          this.hasFired = true;\r\n          for (let ball of this.ballsTeam1) {\r\n            ball.SetType(b2BodyType.b2_dynamicBody);\r\n            ball.ApplyLinearImpulseToCenter(impulse);\r\n          }\r\n        }\r\n        if (this.StateGame.WhoisTurning === 2 && this.hasFired === false) {\r\n          for (let ball of this.ballsTeam2) {\r\n            ball.SetType(b2BodyType.b2_dynamicBody);\r\n            ball.ApplyLinearImpulseToCenter(impulse);\r\n          }\r\n          this.dragging = false;\r\n          this.hasFired = true;\r\n          this.StateGame.CooldownTime = 6;\r\n        }\r\n\r\n        setTimeout(() => {\r\n          this.StateGame.changeTurn = true;\r\n        }, 6000);\r\n      }\r\n    }\r\n    this.shapeRenderer.begin();\r\n\r\n    if (this.dragging && this.hasFired === false) {\r\n      tmpV2\r\n        .set(this.originPosition.x, this.originPosition.y)\r\n        .sub(this.dragPositioning.x, this.dragPositioning.y);\r\n      if (tmpV2.len2() <= MAX_DRAGGING_RANGE * MAX_DRAGGING_RANGE) {\r\n        tmpV2.nor().scale(-MAX_DRAGGING_RANGE);\r\n        tmpV2.add(this.originPosition.x, this.originPosition.y);\r\n      } else {\r\n        tmpV2.setVector(this.dragPositioning);\r\n      }\r\n      this.shapeRenderer.rectLine(\r\n        true,\r\n        this.originPosition.x,\r\n        this.originPosition.y,\r\n        tmpV2.x,\r\n        tmpV2.y,\r\n        10\r\n      );\r\n\r\n      trajectories.length = 0;\r\n      const impulse = calculateImpulse(\r\n        this.originPosition,\r\n        this.dragPositioning\r\n      );\r\n      for (let i = 0; i < 180; i++) {\r\n        const pos = getTrajectoryPoint(this.originPosition, impulse, i);\r\n        trajectories.push(pos.x, pos.y);\r\n      }\r\n      for (let i = 0; i < trajectories.length; i += 2) {\r\n        this.shapeRenderer.circle(\r\n          true,\r\n          trajectories[i],\r\n          trajectories[i + 1],\r\n          5,\r\n          Color.BLUE,\r\n          10\r\n        );\r\n      }\r\n    }\r\n    this.shapeRenderer.end();\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\utils.ts",["63","64"],[],"import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Filter,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport const createGround = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nexport const createBall = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number,\r\n  categoryBits: number,\r\n  maskBits: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n\r\n  fixtureDef.filter.categoryBits = categoryBits;\r\n  fixtureDef.filter.maskBits = maskBits;\r\n\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"ball\");\r\n  return body;\r\n};\r\n\r\nexport const createPerson = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: { name: string },\r\n  categoryBits: number,\r\n  maskBits: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nexport const createArray = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  angle: number,\r\n  categoryBits: number,\r\n  maskBits: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n\r\n  shape.SetAsBox(width / 2, height / 2, {\r\n    x: width / 4 - 0.1,\r\n    y: height / 4 - 0.2,\r\n  });\r\n  body.SetUserData({\r\n    name: \"Array\",\r\n  });\r\n  body.SetAngle(angle);\r\n\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = shape;\r\n  fixtureDef.filter.categoryBits = categoryBits;\r\n  fixtureDef.filter.maskBits = maskBits;\r\n\r\n  body.CreateFixture(fixtureDef);\r\n\r\n  return body;\r\n};\r\n","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts",["65","66"],[],"import { b2Body, b2BodyType, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { Vector2 } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { createArray, createBall } from \"./utils\";\r\n\r\nexport class TurnOfTeam extends System {\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"ballsTeam2\") ballsTeam2: b2Body[];\r\n  @Inject(\"Team1\") Team1: b2Body[];\r\n  @Inject(\"Team2\") Team2: b2Body[];\r\n\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"mapData\") mapData: any;\r\n\r\n  MAP_HEIGHT = 1000;\r\n  ball1: any;\r\n  ball2: any;\r\n\r\n  initialized() {\r\n    this.ball1 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball1\"\r\n    ).objects;\r\n    this.ball2 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball2\"\r\n    ).objects;\r\n  }\r\n\r\n  process(): void {\r\n    if (\r\n      this.StateGame.CooldownTime < 0 &&\r\n      this.StateGame.changeTurn &&\r\n      this.StateGame.conditionWin === false\r\n    ) {\r\n      switch (this.StateGame.WhoisTurning) {\r\n        case 1:\r\n          this.StateGame.WhoisTurning = 2;\r\n          for (let i = this.ballsTeam1.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam1[i]);\r\n            this.ballsTeam1.splice(i, 1);\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            this.Team1[i].SetActive(true);\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            this.Team2[i].SetActive(false);\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            this.ballsTeam2.push(\r\n              createArray(\r\n                this.physicWorld,\r\n                this.Team2[i].GetPosition().x + 0.2,\r\n                this.Team2[i].GetPosition().y + 0.2,\r\n                Constants.ARRAY_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n                Constants.ARRAY_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n                15,\r\n                Constants.BALLTEAM2_CATEGORY_BIT,\r\n                Constants.BALLTEAM2_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          this.StateGame.changeTurn = false;\r\n          if (\r\n            this.StateGame.conditionWin === false &&\r\n            this.Team2.length !== 0\r\n          ) {\r\n            this.originPosition.set(\r\n              this.ballsTeam2[0].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD,\r\n              this.ballsTeam2[0].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          break;\r\n        case 2:\r\n          for (let i = this.ballsTeam2.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam2[i]);\r\n            this.ballsTeam2.splice(i, 1);\r\n          }\r\n          for (let i = this.Team2.length - 1; i >= 0; i--) {\r\n            this.Team2[i].SetActive(true);\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            // this.Team1[i].SetType(b2BodyType.b2_staticBody);\r\n            this.Team1[i].SetActive(false);\r\n            this.StateGame.WhoisTurning = 1;\r\n          }\r\n          for (let i = 0; i < this.Team1.length; i++) {\r\n            this.ballsTeam1.push(\r\n              createArray(\r\n                this.physicWorld,\r\n                this.Team1[i].GetPosition().x + 0.2,\r\n                this.Team1[i].GetPosition().y + 0.2,\r\n                Constants.ARRAY_WIDTH / Constants.METER_TO_PHYSIC_WORLD,\r\n                Constants.ARRAY_HEIGHT / Constants.METER_TO_PHYSIC_WORLD,\r\n                0,\r\n                Constants.BALLTEAM1_CATEGORY_BIT,\r\n                Constants.BALLTEAM1_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          this.StateGame.changeTurn = false;\r\n          if (\r\n            this.StateGame.conditionWin === false &&\r\n            this.Team1.length !== 0\r\n          ) {\r\n            this.originPosition.set(\r\n              this.ballsTeam1[0].GetPosition().x *\r\n                Constants.METER_TO_PHYSIC_WORLD,\r\n              this.ballsTeam1[0].GetPosition().y *\r\n                Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\ContactListener.ts",["67"],[],"import { b2Body, b2Contact, b2ContactListener, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { getTextOfJSDocComment } from \"typescript\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\n\r\nexport class ContactListenerSystem extends System {\r\n  @Inject(\"contactListener\") contactListener: b2ContactListener;\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"Team1\") Team1: b2Body[];\r\n  @Inject(\"Team2\") Team2: b2Body[];\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n\r\n  initialized() {\r\n    this.contactListener.BeginContact = function (contact: b2Contact) {\r\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\r\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"Person\")) {\r\n        fixtureAData.durability += 1;\r\n      }\r\n    };\r\n    setTimeout(() => {\r\n      this.physicWorld.SetContactListener(this.contactListener);\r\n    }, 500);\r\n  }\r\n\r\n  process(): void {\r\n    for (let i = 0; i < this.Team1.length; i++) {\r\n      if (typeof this.Team1[i].GetUserData().durability === \"number\") {\r\n        if (this.Team1[i].GetUserData().durability <= 5) {\r\n        } else {\r\n          this.physicWorld.DestroyBody(this.Team1[i]);\r\n          this.Team1.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < this.Team2.length; i++) {\r\n      if (typeof this.Team2[i].GetUserData().durability === \"number\") {\r\n        if (this.Team2[i].GetUserData().durability <= 5) {\r\n        } else {\r\n          this.physicWorld.DestroyBody(this.Team2[i]);\r\n          this.Team2.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < this.Team1.length; i++) {\r\n      if (this.Team1[i].GetPosition().y <= 3) {\r\n        this.physicWorld.DestroyBody(this.Team1[i]);\r\n        this.Team1.splice(i, 1);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.Team2.length; i++) {\r\n      if (this.Team2[i].GetPosition().y <= 3) {\r\n        this.physicWorld.DestroyBody(this.Team2[i]);\r\n        this.Team2.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts",[],[],{"ruleId":"68","severity":1,"message":"69","line":1,"column":18,"nodeType":"70","messageId":"71","endLine":1,"endColumn":28},{"ruleId":"68","severity":1,"message":"72","line":5,"column":3,"nodeType":"70","messageId":"71","endLine":5,"endColumn":13},{"ruleId":"68","severity":1,"message":"73","line":23,"column":3,"nodeType":"70","messageId":"71","endLine":23,"endColumn":13},{"ruleId":"68","severity":1,"message":"74","line":94,"column":7,"nodeType":"70","messageId":"71","endLine":94,"endColumn":16},{"ruleId":"68","severity":1,"message":"75","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":14},{"ruleId":"68","severity":1,"message":"76","line":6,"column":3,"nodeType":"70","messageId":"71","endLine":6,"endColumn":11},{"ruleId":"68","severity":1,"message":"77","line":11,"column":10,"nodeType":"70","messageId":"71","endLine":11,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":1,"column":18,"nodeType":"70","messageId":"71","endLine":1,"endColumn":28},{"ruleId":"68","severity":1,"message":"73","line":6,"column":23,"nodeType":"70","messageId":"71","endLine":6,"endColumn":33},{"ruleId":"68","severity":1,"message":"78","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":31},"@typescript-eslint/no-unused-vars","'b2BodyType' is defined but never used.","Identifier","unusedVar","'InputEvent' is defined but never used.","'createBall' is defined but never used.","'touchTemp' is assigned a value but never used.","'stat' is defined but never used.","'b2Filter' is defined but never used.","'Constants' is defined but never used.","'getTextOfJSDocComment' is defined but never used."]