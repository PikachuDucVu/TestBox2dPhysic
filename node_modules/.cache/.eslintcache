[{"D:\\projects\\test-game\\src\\index.ts":"1","D:\\projects\\test-game\\src\\Constant.ts":"2","D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts":"3","D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts":"4","D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts":"5","D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts":"6","D:\\projects\\test-game\\src\\System\\utils.ts":"7","D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts":"8","D:\\projects\\test-game\\src\\System\\ContactListener.ts":"9","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts":"10","D:\\projects\\test-game\\src\\System\\CameraGame.ts":"11","D:\\projects\\test-game\\src\\System\\CreateHuman.ts":"12"},{"size":979,"mtime":1666838808937,"results":"13","hashOfConfig":"14"},{"size":9178,"mtime":1670946051969,"results":"15","hashOfConfig":"14"},{"size":10895,"mtime":1670946456448,"results":"16","hashOfConfig":"14"},{"size":4211,"mtime":1669624667951,"results":"17","hashOfConfig":"14"},{"size":1924,"mtime":1667201340839,"results":"18","hashOfConfig":"14"},{"size":6849,"mtime":1670770004843,"results":"19","hashOfConfig":"14"},{"size":9620,"mtime":1670945634719,"results":"20","hashOfConfig":"14"},{"size":5574,"mtime":1670944699965,"results":"21","hashOfConfig":"14"},{"size":2730,"mtime":1670946038179,"results":"22","hashOfConfig":"14"},{"size":2357,"mtime":1670937896528,"results":"23","hashOfConfig":"14"},{"size":2367,"mtime":1670401948986,"results":"24","hashOfConfig":"14"},{"size":4748,"mtime":1670400782789,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"1hs4tzq",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"D:\\projects\\test-game\\src\\index.ts",["69"],[],"import { b2_pi } from \"box2d.ts\";\r\nimport {\r\n  AssetManager,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  Game,\r\n} from \"gdxts\";\r\nimport { Constants } from \"./Constant\";\r\nimport { createGameScreen } from \"./GameScreen/GameScreen\";\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(\r\n    canvas,\r\n    Constants.WORLD_WIDTH,\r\n    Constants.WORLD_HEIGHT\r\n  );\r\n  const gl = viewport.getContext();\r\n\r\n  const assetManager = new AssetManager(gl);\r\n  await assetManager.loadTexture(\"./bloodBar.png\", \"bloodBar\");\r\n  await assetManager.loadTexture(\"./vsAsset.png\", \"vsAsset\");\r\n  await assetManager.loadTexture(\"./winningAsset.png\", \"winningAsset\");\r\n  await assetManager.loadTexture(\"./tempAsset.png\", \"paint\");\r\n\r\n  Game.shared.setScreen(await createGameScreen(assetManager, viewport));\r\n\r\n  createGameLoop((delta: number) => {\r\n    Game.shared.update(delta);\r\n  });\r\n};\r\ninit();\r\n","D:\\projects\\test-game\\src\\Constant.ts",["70"],[],"import { constants } from \"buffer\";\r\n\r\nexport class Constants {\r\n  public static readonly WORLD_WIDTH = 3000;\r\n  public static readonly WORLD_HEIGHT = 1500;\r\n  public static readonly METER_TO_PHYSIC_WORLD = 100;\r\n  public static readonly PERSON_HEIGHT = 75;\r\n  public static readonly PERSON_WIDTH = 35;\r\n\r\n  public static readonly GROUND_CATEGORY_BIT = 1 << 0;\r\n  public static readonly BALLTEAM1_CATEGORY_BIT = 1 << 1;\r\n  public static readonly BALLTEAM2_CATEGORY_BIT = 1 << 2;\r\n\r\n  public static readonly BODY_CATEGORY_BIT = 1 << 3;\r\n\r\n  public static readonly HEAD_BODY_CATEGORY_BIT = 1 << 10;\r\n  public static readonly TORSO1_BODY_CATEGORY_BIT = 1 << 11;\r\n  public static readonly TORSO2_BODY_CATEGORY_BIT = 1 << 12;\r\n  public static readonly TORSO3_BODY_CATEGORY_BIT = 1 << 13;\r\n  public static readonly LEFTARM_BODY_CATEGORY_BIT = 1 << 14;\r\n  public static readonly RIGHTARM_BODY_CATEGORY_BIT = 1 << 15;\r\n  public static readonly UPPERLEFTLEG_BODY_CATEGORY_BIT = 1 << 16;\r\n  public static readonly UPPERRIGHTLEG_BODY_CATEGORY_BIT = 1 << 17;\r\n  public static readonly LOWERLEFTLEG_BODY_CATEGORY_BIT = 1 << 18;\r\n  public static readonly LOWERRIGHTLEG_BODY_CATEGORY_BIT = 1 << 19;\r\n\r\n  public static readonly GROUND_MASK_BIT =\r\n    Constants.BALLTEAM1_CATEGORY_BIT | Constants.BALLTEAM2_CATEGORY_BIT;\r\n\r\n  public static readonly BALLTEAM1_MASK_BIT = Constants.GROUND_CATEGORY_BIT;\r\n  public static readonly BALLTEAM2_MASK_BIT = Constants.GROUND_CATEGORY_BIT;\r\n\r\n  public static readonly BODY_MASK_BIT =\r\n    Constants.GROUND_CATEGORY_BIT |\r\n    Constants.BALLTEAM1_CATEGORY_BIT |\r\n    Constants.BALLTEAM2_CATEGORY_BIT;\r\n\r\n  //   public static readonly BALLTEAM1_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n  //   public static readonly BALLTEAM2_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly HEAD_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly TORSO1_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly TORSO2_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly TORSO3_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly LEFTARM_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly RIGHTARM_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly UPPERLEFTLEG_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly UPPERRIGHTLEG_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly LOWERLEFTLEG_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERRIGHTLEG_BODY_CATEGORY_BIT;\r\n\r\n  //   public static readonly LOWERRIGHTLEG_BODY_MASK_BIT =\r\n  //     Constants.GROUND_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM1_CATEGORY_BIT |\r\n  //     Constants.BALLTEAM2_CATEGORY_BIT |\r\n  //     Constants.HEAD_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO1_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO2_BODY_CATEGORY_BIT |\r\n  //     Constants.TORSO3_BODY_CATEGORY_BIT |\r\n  //     Constants.LEFTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.RIGHTARM_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT |\r\n  //     Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT;\r\n}\r\n","D:\\projects\\test-game\\src\\GameScreen\\GameScreen.ts",[],[],"D:\\projects\\test-game\\src\\RenderSystem\\physicDebugSystem.ts",[],[],"D:\\projects\\test-game\\src\\RenderSystem\\RenderSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\inputHandlerSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\utils.ts",["71"],[],"import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { Constants } from \"../Constant\";\r\n\r\nexport const createGround = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2, { x: width / 2, y: -height / 2 });\r\n\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nexport const createBall = (\r\n  physicWorld: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number,\r\n  categoryBits: number,\r\n  maskBits: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.density = 2;\r\n\r\n  fixtureDef.filter.categoryBits = categoryBits;\r\n  fixtureDef.filter.maskBits = maskBits;\r\n\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"ball\");\r\n  return body;\r\n};\r\n\r\nexport const head = (physicWorld: b2World, startX: number, startY: number) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = new b2CircleShape(1.25 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.3;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX, startY);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const torso1 = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(1.5 / 10, 1.0 / 10);\r\n  fixtureDef.density = 1.0;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.TORSO1_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.TORSO1_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX, startY - 3.8 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const torso2 = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(1.5 / 10, 1.0 / 10);\r\n  fixtureDef.density = 1.0;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.TORSO2_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.TORSO2_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX, startY - 4.3 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"body\");\r\n  return body;\r\n};\r\n\r\nexport const torso3 = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(1.5 / 10, 1.0 / 10);\r\n  fixtureDef.density = 1.0;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.TORSO3_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.TORSO3_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX, startY - 5.8 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const leftArm = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.LEFTARM_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.LEFTARM_BODY_MASK_BIT;\r\n  shape.SetAsBox(0.65 / 10, 1.8 / 10);\r\n  bodyDef.position.Set(startX - 3.0 / 10, startY - 4.0 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const rightArm = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(0.65 / 10, 1.8 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.RIGHTARM_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.RIGHTARM_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX + 3.0 / 10, startY - 4.0 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const upperLeftLeg = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(0.75 / 10, 2.2 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.UPPERLEFTLEG_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.UPPERLEFTLEG_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX - 0.8 / 10, startY - 8.5 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const upperRightLeg = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(0.75 / 10, 2.2 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.UPPERRIGHTLEG_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.UPPERRIGHTLEG_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX + 0.8 / 10, startY - 8.5 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const lowerLeftLeg = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(0.6 / 10, 2.0 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.LOWERLEFTLEG_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX - 0.8 / 10, startY - 12.0 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n\r\nexport const lowerRightLeg = (\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  const shape = new b2PolygonShape();\r\n  const fixtureDef = new b2FixtureDef();\r\n  shape.SetAsBox(0.6 / 10, 2.0 / 10);\r\n  fixtureDef.density = 1;\r\n  fixtureDef.friction = 0.4;\r\n  fixtureDef.restitution = 0.1;\r\n  fixtureDef.shape = shape;\r\n  // fixtureDef.filter.categoryBits = Constants.BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.BODY_MASK_BIT;\r\n  // fixtureDef.filter.categoryBits = Constants.LOWERLEFTLEG_BODY_CATEGORY_BIT;\r\n  // fixtureDef.filter.maskBits = Constants.LOWERRIGHTLEG_BODY_MASK_BIT;\r\n  bodyDef.position.Set(startX + 0.8 / 10, startY - 12.0 / 10);\r\n  const body = physicWorld.CreateBody(bodyDef);\r\n  body.SetUserData(\"body\");\r\n  body.CreateFixture(fixtureDef);\r\n  return body;\r\n};\r\n",[],"D:\\projects\\test-game\\src\\System\\TurnOfTeam.ts",["72"],[],"import { b2Body, b2BodyType, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { OrthoCamera, Vector2 } from \"gdxts\";\r\nimport { Constants } from \"../Constant\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { HumanPartType, HumanRig } from \"./CreateHuman\";\r\nimport { createBall } from \"./utils\";\r\n\r\nexport class TurnOfTeam extends System {\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"ballsTeam2\") ballsTeam2: b2Body[];\r\n  @Inject(\"Team1\") Team1: HumanRig[];\r\n  @Inject(\"Team2\") Team2: HumanRig[];\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"mapData\") mapData: any;\r\n  @Inject(\"camera\") camera: OrthoCamera;\r\n\r\n  MAP_HEIGHT = 1000;\r\n  ball1: any;\r\n  ball2: any;\r\n\r\n  initialized() {\r\n    this.ball1 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball1\"\r\n    ).objects;\r\n    this.ball2 = this.mapData.layers.find(\r\n      (b: any) => b.name === \"ball2\"\r\n    ).objects;\r\n  }\r\n\r\n  process(): void {\r\n    // if (this.Team1.length === 0 || this.Team2.length === 0 ) {\r\n    //   this.StateGame.conditionWin = true;\r\n    // }\r\n    if (\r\n      this.StateGame.CooldownTime < 0 &&\r\n      this.StateGame.changeTurn &&\r\n      this.StateGame.conditionWin === false\r\n    ) {\r\n      switch (this.StateGame.WhoisTurning) {\r\n        case 1:\r\n          this.StateGame.WhoisTurning = 2;\r\n          for (let i = this.ballsTeam1.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam1[i]);\r\n            this.ballsTeam1.splice(i, 1);\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < this.Team1[i].parts.length; j++) {\r\n              this.Team1[i].parts[j].SetActive(true);\r\n            }\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            for (let j = 0; j < this.Team2[i].parts.length; j++) {\r\n              this.Team2[i].parts[j].SetActive(false);\r\n            }\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            this.ballsTeam2.push(\r\n              createBall(\r\n                this.physicWorld,\r\n                this.Team2[i].parts[HumanPartType.Head].GetPosition().x + 0.2,\r\n                this.Team2[i].parts[HumanPartType.Head].GetPosition().y + 0.1,\r\n                0.075,\r\n                Constants.BALLTEAM2_CATEGORY_BIT,\r\n                Constants.BALLTEAM2_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          this.camera.position.set(\r\n            this.ballsTeam2[\r\n              Math.floor(this.ballsTeam2.length / 2)\r\n            ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n            Constants.WORLD_HEIGHT / 2,\r\n            0\r\n          );\r\n          this.camera.update();\r\n          this.StateGame.changeTurn = false;\r\n          if (this.StateGame.conditionWin === false) {\r\n            this.originPosition.set(\r\n              this.ballsTeam2[\r\n                Math.floor(this.ballsTeam2.length / 2)\r\n              ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n              this.ballsTeam2[\r\n                Math.floor(this.ballsTeam2.length / 2)\r\n              ].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          break;\r\n        case 2:\r\n          for (let i = this.ballsTeam2.length - 1; i >= 0; i--) {\r\n            this.physicWorld.DestroyBody(this.ballsTeam2[i]);\r\n            this.ballsTeam2.splice(i, 1);\r\n          }\r\n          for (let i = 0; i < this.Team2.length; i++) {\r\n            for (let j = 0; j < this.Team2[i].parts.length; j++) {\r\n              this.Team2[i].parts[j].SetActive(true);\r\n            }\r\n          }\r\n          for (let i = this.Team1.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < this.Team1[i].parts.length; j++) {\r\n              this.Team1[i].parts[j].SetActive(false);\r\n            }\r\n          }\r\n          this.StateGame.WhoisTurning = 1;\r\n          for (let i = 0; i < this.Team1.length; i++) {\r\n            this.ballsTeam1.push(\r\n              createBall(\r\n                this.physicWorld,\r\n                this.Team1[i].parts[HumanPartType.Head].GetPosition().x + 0.2,\r\n                this.Team1[i].parts[HumanPartType.Head].GetPosition().y + 0.1,\r\n                0.075,\r\n                Constants.BALLTEAM1_CATEGORY_BIT,\r\n                Constants.BALLTEAM1_MASK_BIT\r\n              )\r\n            );\r\n          }\r\n          this.camera.position.set(\r\n            this.ballsTeam1[\r\n              Math.floor(this.ballsTeam1.length / 2)\r\n            ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n            Constants.WORLD_HEIGHT / 2,\r\n            0\r\n          );\r\n          this.camera.update();\r\n\r\n          this.StateGame.changeTurn = false;\r\n          if (this.StateGame.conditionWin === false) {\r\n            this.originPosition.set(\r\n              this.ballsTeam1[\r\n                Math.floor(this.ballsTeam1.length / 2)\r\n              ].GetPosition().x * Constants.METER_TO_PHYSIC_WORLD,\r\n              this.ballsTeam1[\r\n                Math.floor(this.ballsTeam1.length / 2)\r\n              ].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n            );\r\n          }\r\n          // this.originPosition.set(\r\n          //   this.ballsTeam1[0].GetPosition().x *\r\n          //     Constants.METER_TO_PHYSIC_WORLD,\r\n          //   this.ballsTeam1[0].GetPosition().y * Constants.METER_TO_PHYSIC_WORLD\r\n          // );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\ContactListener.ts",["73","74"],[],"import {\r\n  b2Body,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2DistanceJointDef,\r\n  b2RevoluteJoint,\r\n  b2RevoluteJointDef,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { StateGame } from \"../dataGame/stateGame\";\r\nimport { physicWorld } from \"../GameScreen/GameScreen\";\r\nimport { HumanPartType, HumanRig } from \"./CreateHuman\";\r\n\r\nexport class ContactListenerSystem extends System {\r\n  @Inject(\"contactListener\") contactListener: b2ContactListener;\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"Team1\") Team1: HumanRig[];\r\n  @Inject(\"Team2\") Team2: HumanRig[];\r\n  @Inject(\"ballsTeam1\") ballsTeam1: b2Body[];\r\n  @Inject(\"StateGame\") StateGame: StateGame;\r\n\r\n  initialized() {\r\n    const jd = new b2RevoluteJointDef();\r\n\r\n    this.contactListener.BeginContact = function (contact: b2Contact) {\r\n      const fixtureAbody = contact.GetFixtureA().GetBody();\r\n      const fixtureBbody = contact.GetFixtureB().GetBody();\r\n      if (\r\n        fixtureBbody.GetUserData() === \"ball\" &&\r\n        fixtureAbody.GetUserData() === \"body\"\r\n      ) {\r\n        jd.Initialize(\r\n          fixtureAbody,\r\n          fixtureBbody,\r\n          fixtureAbody.GetWorldCenter()\r\n        );\r\n        jd.collideConnected = false;\r\n        jd.lowerAngle = 0;\r\n        jd.upperAngle = 0;\r\n        jd.enableLimit = true;\r\n        physicWorld.m_locked = false;\r\n        physicWorld.CreateJoint(jd);\r\n      }\r\n      if (\r\n        fixtureAbody.GetUserData() !== \"body\" &&\r\n        fixtureBbody.GetUserData() === \"ball\"\r\n      ) {\r\n        fixtureBbody.m_activeFlag = false;\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      this.physicWorld.SetContactListener(this.contactListener);\r\n    }, 500);\r\n  }\r\n\r\n  process(): void {\r\n    for (let i = 0; i < this.Team1.length; i++) {\r\n      if (\r\n        Math.abs(\r\n          this.Team1[i].parts[HumanPartType.Torso2].GetPosition().y -\r\n            this.Team1[i].parts[HumanPartType.Head].GetPosition().y\r\n        ) <= 0.3\r\n      ) {\r\n        for (let j = this.Team1[i].parts.length - 1; j >= 0; j--) {\r\n          this.physicWorld.DestroyBody(this.Team1[i].parts[j]);\r\n          this.Team1[i].parts.splice(j, 1);\r\n        }\r\n        this.Team1.splice(i, 1);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.Team2.length; i++) {\r\n      if (\r\n        Math.abs(\r\n          this.Team2[i].parts[HumanPartType.Torso2].GetPosition().y -\r\n            this.Team2[i].parts[HumanPartType.Head].GetPosition().y\r\n        ) <= 0.3\r\n      ) {\r\n        for (let j = this.Team2[i].parts.length - 1; j >= 0; j--) {\r\n          this.physicWorld.DestroyBody(this.Team2[i].parts[j]);\r\n          this.Team2[i].parts.splice(j, 1);\r\n        }\r\n        this.Team2.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","D:\\projects\\test-game\\src\\System\\NextLevelSystem.ts",[],[],"D:\\projects\\test-game\\src\\System\\CameraGame.ts",[],[],"D:\\projects\\test-game\\src\\System\\CreateHuman.ts",["75","76"],[],"import {\r\n  b2Body,\r\n  b2BodyType,\r\n  b2DegToRad,\r\n  b2RevoluteJointDef,\r\n  b2Vec2,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { parseJsonText } from \"typescript\";\r\nimport { physicWorld } from \"../GameScreen/GameScreen\";\r\nimport {\r\n  head,\r\n  leftArm,\r\n  lowerLeftLeg,\r\n  lowerRightLeg,\r\n  rightArm,\r\n  torso1,\r\n  torso2,\r\n  torso3,\r\n  upperLeftLeg,\r\n  upperRightLeg,\r\n} from \"./utils\";\r\n\r\nexport enum HumanPartType {\r\n  Head = 0,\r\n  Torso1,\r\n  Torso2,\r\n  Torso3,\r\n  leftArm,\r\n  rightArm,\r\n  upperLeftLeg,\r\n  upperRightLeg,\r\n  lowerLeftLeg,\r\n  lowerRightLeg,\r\n}\r\nexport interface HumanRig {\r\n  parts: b2Body[];\r\n}\r\n\r\nexport function human(\r\n  physicWorld: b2World,\r\n  startX: number,\r\n  startY: number\r\n): HumanRig {\r\n  const humanRig: HumanRig = {\r\n    parts: [],\r\n  };\r\n  humanRig.parts.push(head(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso1(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso2(physicWorld, startX, startY));\r\n  humanRig.parts.push(torso3(physicWorld, startX, startY));\r\n  humanRig.parts.push(leftArm(physicWorld, startX, startY));\r\n  humanRig.parts.push(rightArm(physicWorld, startX, startY));\r\n  humanRig.parts.push(upperLeftLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(upperRightLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(lowerLeftLeg(physicWorld, startX, startY));\r\n  humanRig.parts.push(lowerRightLeg(physicWorld, startX, startY));\r\n\r\n  const jd = new b2RevoluteJointDef();\r\n  // Head to shoulders\r\n  jd.lowerAngle = b2DegToRad(0);\r\n  jd.upperAngle = b2DegToRad(0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.Head],\r\n    new b2Vec2(startX, startY - 1.5 / 10)\r\n  );\r\n  jd.enableLimit = true;\r\n  physicWorld.CreateJoint(jd);\r\n\r\n  // Upper arm to shoulders\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-85.0);\r\n  jd.upperAngle = b2DegToRad(130.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.leftArm],\r\n    new b2Vec2(startX - 1.8 / 10, startY - 2.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-130.0);\r\n  jd.upperAngle = b2DegToRad(85.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.rightArm],\r\n    new b2Vec2(startX + 1.8 / 10, startY - 2.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Lower arm to upper arm\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-130.0);\r\n  jd.upperAngle = b2DegToRad(10.0);\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-10.0);\r\n  jd.upperAngle = b2DegToRad(130.0);\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Shoulders/stomach\r\n  jd.lowerAngle = b2DegToRad(-15.0);\r\n  jd.upperAngle = b2DegToRad(15.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso1],\r\n    humanRig.parts[HumanPartType.Torso2],\r\n    new b2Vec2(startX, startY - 3.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  // Stomach/hips\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso2],\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    new b2Vec2(startX, startY - 5.0 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Torso to upper leg\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(-25.0);\r\n  jd.upperAngle = b2DegToRad(45.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    humanRig.parts[HumanPartType.upperLeftLeg],\r\n    new b2Vec2(startX - 0.8 / 10, startY - 7.2 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-45.0);\r\n  jd.upperAngle = b2DegToRad(25.0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.Torso3],\r\n    humanRig.parts[HumanPartType.upperRightLeg],\r\n    new b2Vec2(startX + 0.8 / 10, startY - 7.2 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // Upper leg to lower leg\r\n  // L\r\n  jd.lowerAngle = b2DegToRad(0);\r\n  jd.upperAngle = b2DegToRad(0);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.upperLeftLeg],\r\n    humanRig.parts[HumanPartType.lowerLeftLeg],\r\n    new b2Vec2(startX - 0.8 / 10, startY - 10.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n\r\n  // R\r\n  jd.lowerAngle = b2DegToRad(-115.0);\r\n  jd.upperAngle = b2DegToRad(25);\r\n  jd.Initialize(\r\n    humanRig.parts[HumanPartType.upperRightLeg],\r\n    humanRig.parts[HumanPartType.lowerRightLeg],\r\n    new b2Vec2(startX + 0.8 / 10, startY - 10.5 / 10)\r\n  );\r\n  physicWorld.CreateJoint(jd);\r\n  jd.enableLimit = true;\r\n  for (let i = 0; i < humanRig.parts.length; i++) {\r\n    humanRig.parts[i].SetType(b2BodyType.b2_dynamicBody);\r\n  }\r\n\r\n  // humanRig.parts[0].SetType(b2BodyType.b2_staticBody);\r\n\r\n  return humanRig;\r\n}\r\n",{"ruleId":"77","severity":1,"message":"78","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":15},{"ruleId":"77","severity":1,"message":"81","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":19},{"ruleId":"77","severity":1,"message":"82","line":10,"column":10,"nodeType":"79","messageId":"80","endLine":10,"endColumn":19},{"ruleId":"77","severity":1,"message":"83","line":1,"column":18,"nodeType":"79","messageId":"80","endLine":1,"endColumn":28},{"ruleId":"77","severity":1,"message":"84","line":5,"column":3,"nodeType":"79","messageId":"80","endLine":5,"endColumn":21},{"ruleId":"77","severity":1,"message":"85","line":6,"column":3,"nodeType":"79","messageId":"80","endLine":6,"endColumn":18},{"ruleId":"77","severity":1,"message":"86","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":23},{"ruleId":"77","severity":1,"message":"87","line":10,"column":10,"nodeType":"79","messageId":"80","endLine":10,"endColumn":21},"@typescript-eslint/no-unused-vars","'b2_pi' is defined but never used.","Identifier","unusedVar","'constants' is defined but never used.","'Constants' is defined but never used.","'b2BodyType' is defined but never used.","'b2DistanceJointDef' is defined but never used.","'b2RevoluteJoint' is defined but never used.","'parseJsonText' is defined but never used.","'physicWorld' is defined but never used."]